package cn.jlb.pro.intelligentcabinet.app;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Environment;
import android.os.StrictMode;
import android.text.TextUtils;
import android.util.Log;

import com.umeng.analytics.MobclickAgent;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Observer;

import cn.jlb.pro.core.app.BaseApp;
import cn.jlb.pro.core.config.CoreConstants;
import cn.jlb.pro.core.utils.LogUtil;
import cn.jlb.pro.core.utils.log.ILog;
import cn.jlb.pro.intelligentcabinet.config.CabinetConfigUtils;
import cn.jlb.pro.intelligentcabinet.config.Constants;
import cn.jlb.pro.intelligentcabinet.entity.BoxInfo;
import cn.jlb.pro.intelligentcabinet.entity.ChargeInfo;
import cn.jlb.pro.intelligentcabinet.entity.GoodsInfo;
import cn.jlb.pro.intelligentcabinet.entity.LoginInfo;
import cn.jlb.pro.intelligentcabinet.entity.SvrInfo.SvrItem;
import cn.jlb.pro.intelligentcabinet.utils.CrashHandler;

/**
 * 程序主入口
 *
 * @author wqr
 */
public class BoxApp extends BaseApp {
    private static final String TAG = "BoxApp";
    private ILog logger;
    /**
     * 存放充值界面的activity
     */
    public static ArrayList<Activity> tasks = new ArrayList<Activity>();
    private LoginInfo login;
    private ChargeInfo chargeInfo;
    private GoodsInfo info;
    private List<GoodsInfo> infos;

    private SharedPreferences sp;
    private HashMap<String, SvrItem> svrInfos;

    // 柜体编号，默认设备号
    public String CABINET_CODE = Constants.CABINET_DEFAULT;
    private static BoxApp app;

    public static BoxApp getApp() {
        return app;
    }

    @Override
    public void onCreate() {
        MobclickAgent.setDebugMode(Constants.DEBUG);
        if (Constants.DEBUG) {
            StrictMode.enableDefaults();
        }
        super.onCreate();
        app = this;

        configLogger();
        logger.info("...程序启动...");

        login = new LoginInfo();
        chargeInfo = new ChargeInfo();

        String cabinet = CabinetConfigUtils.getCabinetCode(this);
        if (!TextUtils.isEmpty(cabinet)) {
            CabinetConfigUtils.setCabinetCode(this, cabinet);
        }

        String status = CabinetConfigUtils.getOperationMode(this) ;
        if (TextUtils.isEmpty(status)) {//默认设置为调试模式
            CabinetConfigUtils.setOperationMode(this,"1");
        }

        CrashHandler crashHandler = CrashHandler.getInstance();
        crashHandler.init(getApplicationContext());

    }

    /**
     * 配置日志 组件
     */
    public void configLogger() {
        //配置 日志框架.此后,logger和日志 才起效
        LogUtil.ConfigPara configPara = new LogUtil.ConfigPara();
        configPara.enable = true;//开关
        configPara.level = Log.VERBOSE;//级别
        configPara.outputFilePrefix = "ui-log";//前缀
        configPara.outputDir = Environment.getExternalStorageDirectory() + CoreConstants.logpath;//路径
        LogUtil.configureLogger(configPara);
        logger = LogUtil.getLogger(BoxApp.class);

        logger.debug("配置日志组件 完成");
    }

    public LoginInfo getLogin() {
        return this.login;
    }

    public void setLogin(LoginInfo info) {
        this.login = info;
    }

    public ChargeInfo getChargeInfo() {
        return this.chargeInfo;
    }

    public void setLoginBox(List<BoxInfo> infos) {
        this.login.infos = infos;
    }

    public void reSetLogin() {
        this.login = new LoginInfo();
    }

    public void reSetChargeInfo() {
        this.chargeInfo = new ChargeInfo();
    }

    public GoodsInfo getGoodsInfo() {
        return this.info;
    }

    public void setGoodsInfo(GoodsInfo info) {
        this.info = info;
        if (infos == null) {
            infos = new ArrayList<GoodsInfo>();
        }
    }

    public List<GoodsInfo> getGoodsInfos() {
        return this.infos;
    }

    public HashMap<String, SvrItem> getSvrInfos() {
        return svrInfos;
    }

    public void setSvrInfos(HashMap<String, SvrItem> svrInfos) {
        this.svrInfos = svrInfos;
        Editor et = getSharedPreferences().edit().putBoolean("key_svr", true);
        et.apply();
    }

    public void reSetGoodsInfo() {
        if (this.info != null) {
            this.info = null;
        }
        if (infos != null) {
            infos = null;
        }
    }

    /**
     * 获取SharedPreferences 对象
     */
    public SharedPreferences getSharedPreferences() {
        if (sp == null) {
            sp = getSharedPreferences("settings", Context.MODE_WORLD_READABLE);
        }
        return sp;
    }

}
/*
 * Copyright (c) 2014-2015 Zhong Ke Fu Chuang (Beijing) Technology Co., Ltd.  All Rights Reserved.
 *
 */

package cn.jlb.pro.intelligentcabinet.app;

import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.util.Base64;
import android.util.Log;
import android.widget.Toast;

import com.google.gson.reflect.TypeToken;

import org.apache.http.Header;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;
import java.util.Set;

import cn.jlb.pro.core.config.CoreConstants;
import cn.jlb.pro.core.entity.MsgBody;
import cn.jlb.pro.core.entity.MsgResult;
import cn.jlb.pro.core.net.Apis.PushType;
import cn.jlb.pro.core.net.MyJsonResonseStringParser;
import cn.jlb.pro.core.net.MyJsonResponseHandler;
import cn.jlb.pro.core.utils.CommonUtil;
import cn.jlb.pro.core.utils.JsonUtils;
import cn.jlb.pro.core.utils.ToastUtils;
import cn.jlb.pro.intelligentcabinet.config.CabinetConfigUtils;
import cn.jlb.pro.intelligentcabinet.config.Constants;
import cn.jlb.pro.intelligentcabinet.dao.PickupDao;
import cn.jlb.pro.intelligentcabinet.dao.PushMsgDao;
import cn.jlb.pro.intelligentcabinet.entity.BoxInfo;
import cn.jlb.pro.intelligentcabinet.entity.GoodsInfo;
import cn.jlb.pro.intelligentcabinet.utils.AnalyticsUtil;
import cn.jlb.pro.intelligentcabinet.utils.BoxUtil;
import cn.jlb.pro.intelligentcabinet.utils.LogUtil;
import cn.jlb.pro.intelligentcabinet.utils.Util;
import cn.jlb.pro.intelligentcabinet.websvc.CabzooRequester;

/**
 * 格口 业务处理
 *
 * @author
 * @version V1.0
 * @date 2015-3-18 上午11:54:54
 */
public class MonitorHandle {

    private static final String TAG = "MonitorHandle";
    public static final String OK = "OK";
    private PickupDao pickupDao;
    private CabzooRequester cabzooRequester;
    private PushMsgDao pushMsgDao;
    private Context context;
    private Handler handler;

    public MonitorHandle(Builder builder) {
        this.pickupDao = builder.pickupDao;
        this.cabzooRequester = builder.cabzooRequester;
        this.pushMsgDao = builder.pushMsgDao;
        this.handler = builder.handler;
        this.context = builder.context;
    }

    /**
     * 处理串口返回的关闭格口消息
     *
     * @param app
     * @param str
     * @throws
     */
    public void closeBox(BoxApp app, String str) {
        String[] cmd = str.split(",");
        String boxID = cmd[2].trim();
        String status = cmd[1].trim();
        int result = AnalyticsUtil.OpResult.DEFAULT;
        if (status.equals(OK)) {
            result = AnalyticsUtil.OpResult.OK;
        } else {
            result = AnalyticsUtil.OpResult.ERROR;
        }
        GoodsInfo info = pickupDao.findByBoxId(boxID);
        AnalyticsUtil.boxlog(context, 0, "", boxID, info != null ? info.waybill : "",
                AnalyticsUtil.BoxOperation.CLOSE_RESPONSE, 0, result);
        if (status.equals(OK)) {
            // new MyToast(context, "格口：" + boxID + "已关闭，请继续操作！", 0).show();
            LogUtil.debug(TAG, "格口：" + boxID + " info " + info);
            if (info != null) {
                if (info.source == 0) { // 柜体操作
                    LogUtil.debug(TAG, "格口关闭 " + boxID);
                    LogUtil.debug(TAG, "app.getLogin().boxs=" + app.getLogin().boxs == null ? "0"
                            : app.getLogin().boxs.size() + "");
                    // 处理未关闭状态
                    if (app.getLogin().boxs.remove(boxID) != null
                            || pickupDao.isUnFinish(boxID, "0") || pickupDao.isUnFinish(boxID, "3")) {
                        pickupDao.updateBoxStatic(boxID);
                    }
                    // Intent intent = new
                    // Intent(MonitorService.ACTION_SERIALPORT_HANDLE);
                    // intent.putExtra("cmds", str);
                    // context.sendBroadcast(intent);
                } else if (info.source == 1) { // 推送操作
                    if (info.push_type == PushType.TYPE_DELIVERY_OPEN) {
                        pickupDao.updateBoxStatic(boxID);
                        deliver_cabconfirm(info);
                    } else if (info.push_type == PushType.TYPE_CANCEL_CONSIGNEE_OPEN) { // 循环提交
                        // push_cabcancel_ack(info.order_id);
                        // LogUtil.error(TAG, "推送 取消投递 ，打开箱体，" + info);
                    } else if (info.push_type == PushType.TYPE_CONSIGNEE_OPEN) {
                        // String exp_code = info.waybill;
                        // boolean isdo = dbModel.delete(" waybill=?", new
                        // String[] { exp_code });
                        // LogUtil.error(TAG, "推送 取件开箱，打开箱体， " + info + " " +
                        // (isdo ? "成功" : "失败"));
                    } else if (info.push_type == PushType.TYPE_FALLBACK_OPEN) {
                        // push_withdraw_confirm(info.order_id);
                        // LogUtil.error(TAG, "推送 退回 ，打开箱体，" + info);
                    }
                }
            } else { // 处理未关闭状态，订单不存在时，也从用户未关闭列表中清除
                app.getLogin().boxs.remove(boxID);
            }
            Intent intent = new Intent(MonitorService.ACTION_SERIALPORT_HANDLE);
            intent.putExtra("cmds", str);
            context.sendBroadcast(intent);
        } else {
            // new MyToast(context, "格口关闭失败 " + boxID + " " + str, 0).show();
            LogUtil.debug(TAG, "格口关闭失败 " + boxID + " " + str);
            // if (info == null || info.push_type == 0) { // 柜体操作
            // } else {
            // push_open_fail(info.order_id);
            // }
        }
    }

    /**
     * 处理串口返回的打开格口消息
     *
     * @param app
     * @param str
     * @throws
     */
    public void openBox(BoxApp app, String str) {
        Log.e(TAG, "openBox " + str);
        String[] cmd = str.split(",");
        String boxID = cmd[2].trim();
        String status = cmd[1].trim();

        int result = AnalyticsUtil.OpResult.DEFAULT;
        if (status.equals(OK)) {
            result = AnalyticsUtil.OpResult.OK;
        } else {
            result = AnalyticsUtil.OpResult.ERROR;
        }
        GoodsInfo info = pickupDao.findByBoxId(boxID);

        AnalyticsUtil.boxlog(context, 0, "", boxID, info != null ? info.waybill : "",
                AnalyticsUtil.BoxOperation.OPEN_RESPONSE, 0, result);
        if (status.equals(OK)) { // 打开成功
            if (info != null) { // 判断是否推送数据
                if (info.source == 1) {
                    if (info.push_type == PushType.TYPE_DELIVERY_OPEN) {
                        // handler.removeMessages(MonitorService.CMD_BOX_OPEN,
                        // boxID);
                        if (info != null) {
                            pickupDao.updateOrderBoxId(info.order_id, boxID);
                        }
                        info = pickupDao.findByBoxId(boxID);
                        LogUtil.error(TAG, "推送 订单入库 ，打开箱体，" + info);
                    } else if (info.push_type == PushType.TYPE_CANCEL_CONSIGNEE_OPEN) { // 循环提交
                        // handler.removeMessages(CMD_BOX_OPEN);
                        info.isPickup = 1;// 已取走
                        // info.pickupPhone = info.phoneNum;
                        info.end_time = System.currentTimeMillis() + "";
                        pickupDao.updatePickuped(info, GoodsInfo.PICKUP_WAY_SCANNER);
                        cabzooRequester.deliver_cabcancel_ack(info.order_id, pickupDao);
                        LogUtil.debug(TAG, "推送 取消投递 ，打开箱体，" + info);
                    } else if (info.push_type == PushType.TYPE_FALLBACK_OPEN) {
                        // handler.removeMessages(CMD_BOX_OPEN);
                        cabzooRequester.withdraw_confirm(info.order_id, pickupDao);
                        LogUtil.debug(TAG, "推送 退回 ，打开箱体，" + info);
                    } else if (info.push_type == PushType.TYPE_OPEN) {
                        LogUtil.debug(TAG, "推送 打开箱体，" + info);
                    } else if (info.push_type == PushType.TYPE_ADMIN_OPEN) {
                        LogUtil.debug(TAG, "推送 管理员打开箱体，" + info);
                    }
                }

                if (info.push_type == PushType.TYPE_CONSIGNEE_OPEN) {
                    LogUtil.debug(TAG, "推送 取件开箱，打开箱体， " + info);
                }
            }
        } else {
            LogUtil.debug(TAG, "格口关闭失败 " + boxID + " " + boxID + " " + status);
        }
    }

    /**
     * 处理推送消息
     *
     * @param intent
     * @throws
     */
    public void push(Intent intent) {
        if (intent.hasExtra(CoreConstants.KEY_MSGRESULT)) {
            String json = intent.getStringExtra(CoreConstants.KEY_MSGRESULT);
            MsgResult<MsgBody> resultBody = JsonUtils.fromJson(json,
                    new TypeToken<MsgResult<MsgBody>>() {
                    });
            LogUtil.debug(TAG, "receive push message " + (resultBody == null ? "null" : resultBody));
            if (resultBody == null) {
                return;
            }
            boolean isExists = pushMsgDao.isExists(resultBody.id);
            LogUtil.debug(TAG, "push message exists " + isExists);
            pushMsgDao.save(resultBody);
            int type = resultBody.type;
            String cell_code = "";
            long cabinet_code = resultBody.cabinet_code;
            String cabinet = CabinetConfigUtils.getCabinetCode(context);
            if (cabinet.equals(cabinet_code + "")) { // 校验柜体编号
                if (type == PushType.TYPE_SHUTDOWN) {
                    CommonUtil.cmd("stop");
                } else if (type == PushType.TYPE_REBOOT) {
                    CommonUtil.cmd("reboot");
                } else if (type == PushType.TYPE_UPGRADE) {
                    LogUtil.debug(TAG, "收到指令 ，软件升级 ");
                    MonitorService.upgrade_type = 1;
                    Util.deleteLocalFile();
//                        cabinet_init(MonitorService.upgrade_type);
                    cabinet_single_updater(MonitorService.upgrade_type, Constants.CABINET_VERSION);
                    pushMsgDao.updateStatus(resultBody.id);
                } else if (type == PushType.TYPE_UPGRADE_HARD) {
                    LogUtil.debug(TAG, "收到指令 ，硬件升级 ");
                    MonitorService.upgrade_type = 2;
//                        cabinet_init(MonitorService.upgrade_type);
                    cabinet_single_updater(MonitorService.upgrade_type, Integer.parseInt(Constants.CABINET_NUMBER.substring(0, 2), 16));
                    pushMsgDao.updateStatus(resultBody.id);
                } else if (type == PushType.TYPE_UPLOAD_LOG) {
                    LogUtil.debug(TAG, "收到指令 ，上传日记 ");
                    handler.sendEmptyMessage(MonitorService.ACTION_UPLOAD_LOG);
                    pushMsgDao.updateStatus(resultBody.id);
                } else if (type == PushType.TYPE_UPLOAD_ORDER) {
                    LogUtil.debug(TAG, "收到指令 ，上传数据表 ");
                    handler.sendEmptyMessage(MonitorService.ACTION_UPLOAD_DATA);
                    pushMsgDao.updateStatus(resultBody.id);
                } else if (type == PushType.TYPE_DOWNLOAD_ORDER) {
                    LogUtil.debug(TAG, "收到指令 ，下载数据表 ");
                    handler.sendEmptyMessage(MonitorService.ACTION_DOWNLOAD_ORDER);
                    pushMsgDao.updateStatus(resultBody.id);
                } else if (type == PushType.TYPE_CLEAR_CACHE) {
                    int sub_cmd = resultBody.body.sub_cmd;
                    clearCache(sub_cmd);
                    LogUtil.debug(TAG, "收到指令 ，清除缓存 " + resultBody);
                    pushMsgDao.updateStatus(resultBody.id);
                } else {
                    MsgBody msgBody = resultBody.body;
                    if (msgBody != null) { // 数据校验
                        cell_code = msgBody.cell_code;
                    }
                    if (type == PushType.TYPE_DELIVERY_OPEN) {
                        // 投递开箱 1、获取订单数据和校验 2、入库和打开格口、3、消息确认 4、投递确认
                        GoodsInfo info = saveOrder(cell_code, msgBody,
                                PushType.TYPE_DELIVERY_OPEN);
                        LogUtil.debug(TAG, "推送 订单入库 ，打开箱体，" + info);
                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.cell_code : "", resultBody.uid, "",
                                resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        // cmdCheckBoxOpen(cell_code, handler);// 设置格口打开超时时间
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，投递开箱 " + info);
                    } else if (type == PushType.TYPE_CANCEL_CONSIGNEE_OPEN) {
                        // 取消投递开箱 1、获取订单数据和校验 2、开箱并清除当前格口订单信息 3、消息确认
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            pickupDao.updatePushTypeAndSource(cell_code,
                                    PushType.TYPE_CANCEL_CONSIGNEE_OPEN);
                            // cmdCheckBoxOpen(cell_code);
                        } else {
                            cabzooRequester.deliver_cabcancel_ack(msgBody.order_id, pickupDao);
                            LogUtil.warning(TAG,"订单不存在 cell_code " + cell_code);
                            // 发现数据不一致，启动上传数据表同步数据，同步数据和提交订单存在冲突，会出现作废订单，讨论后确定去掉
//                            handler.sendEmptyMessage(MonitorService.ACTION_UPLOAD_DATA);
                        }
                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.exp_code : "", resultBody.uid, "",
                                resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        // 取消投递开箱
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，取消投递开箱 " + (info == null ? "订单不存在" : info));
                    } else if (type == PushType.TYPE_CONSIGNEE_OPEN) {
                        // ?
                        // 取件开箱 1、获取订单数据和校验 2、开箱和更新订单状态 3、消息确认并上报取件订单
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            info.pickupPhone = msgBody.consignee_phone;
                            pickupDao.updatePushTypeAndSource(cell_code,
                                    PushType.TYPE_CONSIGNEE_OPEN);
                            // cmdCheckBoxOpen(cell_code);
                            // 开箱同时修改订单状态
                            info.isPickup = 1;// 已取走
                            info.end_time = System.currentTimeMillis() + "";
                            info.pickupPay = msgBody != null ? msgBody.pickup_way : 0;
                            pickupDao.updatePickuped(info, info.pickupPay);
                            pickupNotify(info);
                        } else {
                            // 发现数据不一致，启动上传数据表同步数据
//                            handler.sendEmptyMessage(MonitorService.ACTION_UPLOAD_DATA);
                            LogUtil.warning(TAG,"订单不存在 cell_code " + cell_code);
                        }
                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.exp_code : "", resultBody.uid,
                                msgBody.consignee_phone, resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，取件开箱 " + (info == null ? "订单不存在" : info));
                    } else if (type == PushType.TYPE_RETRIEVE_ORDER) {
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            pickupDao.updatePushTypeAndSource(cell_code,
                                    PushType.TYPE_RETRIEVE_ORDER);
                            // cmdCheckBoxOpen(cell_code);
                            // 开箱同时修改订单状态
                            info.isPickup = 1;// 已取走
                            info.end_time = System.currentTimeMillis() + "";
                            info.pickupPay = msgBody != null ? msgBody.pickup_way : 0;
                            pickupDao.updatePickuped(info, info.pickupPay);
                            retrieve_order(info);
                        } else {
                            // 发现数据不一致，启动上传数据表同步数据
//                            handler.sendEmptyMessage(MonitorService.ACTION_UPLOAD_DATA);
                            LogUtil.warning(TAG, "订单不存在 cell_code " + cell_code);
                        }
                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.exp_code : "", resultBody.uid,
                                msgBody.consignee_phone, resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，快递员APP 取回开箱 "
                                + (info == null ? "订单不存在" : info));
                    } else if (type == PushType.TYPE_PASSWORD_UPDATE) {
                        // 手机号更新 1、获取订单数据和校验 ,更新运单密码 ，消息确认
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            info.phoneNum = msgBody.consignee_phone;
                            pickupDao.updatePhone(info, cell_code, msgBody.exp_code);
                            pickupDao.updatePushType(cell_code, PushType.TYPE_PASSWORD_UPDATE);
                            update_phone(msgBody.consignee_phone, info);
                        } else {
                            // 发现数据不一致，启动上传数据表同步数据
//                            handler.sendEmptyMessage(MonitorService.ACTION_UPLOAD_DATA);
                            LogUtil.warning(TAG, "订单不存在 cell_code " + cell_code);
                        }
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，修改手机号 " + info);
                    } else if (type == PushType.TYPE_FALLBACK_OPEN) {
                        // 1、获取订单数据和校验 2、开箱和删除运单信息 3、消息确认
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            pickupDao.updatePushTypeAndSource(cell_code,
                                    PushType.TYPE_FALLBACK_OPEN);
                            // cmdCheckBoxOpen(cell_code);
                        } else {
                            cabzooRequester.withdraw_confirm(msgBody.order_id, pickupDao);
                        }
                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.exp_code : "", resultBody.uid, "",
                                resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        // 取消投递开箱
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，退回开箱 " + (info == null ? "订单不存在" : info));
                    } else if (type == PushType.TYPE_CHARGING_UPDATE) {
                        LogUtil.debug(TAG, "收到指令 ，计费配置更新 " + msgBody);
                    } else if (type == PushType.TYPE_DELETE_ORDER) {
                        GoodsInfo info = pickupDao.findByOrderID(msgBody.order_id);
                        boolean flag = false;
                        if (info != null) {
                            flag = pickupDao.delectPickupByOrderId(msgBody.order_id);
                        }
                        LogUtil.debug(TAG, "收到指令 ，管理员删除订单 " + msgBody + ",删除 "
                                + (flag ? "成功" : "失败"));
                        info = null;
                    } else if (type == PushType.TYPE_OPEN) {
                        // 开箱指令
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            pickupDao.updatePushTypeAndSource(cell_code, PushType.TYPE_OPEN);
                        }
                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.exp_code : "", resultBody.uid, "",
                                resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，开箱指令 " + (info == null ? "订单不存在" : info));
                    } else if (type == PushType.TYPE_ADMIN_OPEN) {
                        // 开箱指令
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            pickupDao.updatePushTypeAndSource(cell_code,
                                    PushType.TYPE_ADMIN_OPEN);
                        }
                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.exp_code : "", resultBody.uid, "",
                                resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        pushMsgDao.updateStatus(resultBody.uid);
                        LogUtil.debug(TAG, "收到指令 ，管理员开箱指令 " + (info == null ? "订单不存在" : info));
                    } else if (type == PushType.TYPE_RECHARGE_SUCCESS) {
                        // 充值成功通知
                        LogUtil.debug(TAG, "收到指令 ，充值成功通知 " + msgBody);
                    } else if (type == PushType.TYPE_OPEN_BATCH) {
                        final List<String> batch = msgBody.code_list;
                        if (batch != null && !batch.isEmpty()) {
                            batchOpenBox(context, handler, batch.toArray(), resultBody.uid, resultBody.src);
                        }
                    } else if (type == PushType.TYPE_ACCEPT_ORDER) {
                        GoodsInfo info = pickupDao.findByOrderID(msgBody.order_id);
                        if (info != null) {
                            LogUtil.debug(TAG, "收到指令 ，扫码枪确认订单 , 柜体订单已存在 " + info);
                        } else {
                            info = saveOrder(cell_code, msgBody, PushType.TYPE_ACCEPT_ORDER);
                        }
                        cabzooRequester.delivery_cab_recv_ack(msgBody.order_id, pickupDao);
                        LogUtil.debug(TAG, "收到指令 ，扫码枪确认订单 " + info);
                    } else if (type == PushType.TYPE_ALLOCATEBYCAB) {
                        int box = opAlloceBox(BoxUtil.getFreeBox(pickupDao.findALLEmploy()), msgBody.idle_cell_map);
                        if (pickupDao.findIsUsing(box + "")) { //如果格口已经占用，再次分配
                            box = opAlloceBox(BoxUtil.getFreeBox(pickupDao.findALLEmploy()), msgBody.idle_cell_map);
                            LogUtil.debug(TAG, "格口已经占用，再次分配 box " + box);
                        }
                        // 保存格口，柜体用户操作时格口位占用状态，否则可用删除
                        GoodsInfo goodsInfo = new GoodsInfo();
                        goodsInfo.box_id = box + ""; //只保存格口编号
                        goodsInfo.push_type = PushType.TYPE_ALLOCATEBYCAB;
                        goodsInfo.source = GoodsInfo.SOURCE_PUSH;
                        goodsInfo.order_time = System.currentTimeMillis() + "";
                        boolean flag = pickupDao.insert(goodsInfo);
                        if (flag) { //插入成功
                            postCellAllocateBycab(box + "", msgBody);
                            BoxUtil.openBox(context, handler, box + "", msgBody.exp_code, resultBody.uid, "",
                                    resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        } else {
                            LogUtil.warning(TAG, "分配格口失败 flag " + flag);
                        }
                        pushMsgDao.updateStatus(resultBody.id);
                    } else if (type == PushType.TYPE_ALLOCATE_CANCELACK) {
                        // 取消投递开箱 1、获取订单数据和校验 2、开箱并清除当前格口订单信息 3、消息确认
                        GoodsInfo info = pickupDao.findByBoxId(cell_code);
                        if (info != null) {
                            pickupDao.updatePushTypeAndSource(cell_code,
                                    PushType.TYPE_ALLOCATE_CANCELACK);
                        }

                        BoxUtil.openBox(context, handler, cell_code,
                                msgBody != null ? msgBody.exp_code : "", resultBody.uid, "",
                                resultBody.src, BoxUtil.PRIORITY_HIGHT);
                        cellAllocateCancelack(msgBody);// 如果网络失败，等待下次删除指令
                        pushMsgDao.updateStatus(resultBody.id);
                        LogUtil.debug(TAG, "收到指令 ，取消投递 ");
                    }
                }
            } else {
                LogUtil.debug(TAG, "收到指令 ，柜体编号与当前柜体编号不一致。 " + json);
            }
        } else if (intent.hasExtra(MonitorService.KEY_TEST_DATA)) {
            String json = intent.getStringExtra(MonitorService.KEY_TEST_DATA);
            final String[] batch = json.split(",");
            batchOpenBox(context, handler, batch, 0, 0);
        }
    }

    private void clearCache(int sub_cmd) {
        if (sub_cmd == 0) {
            Util.clearCache(context);
        } else if (sub_cmd == 1) {
            Util.clearCacheInit(context);
        } else if (sub_cmd == 2) { //TODO

        } else if (sub_cmd == 3) {
            Util.clearCacheForecharge(context);
        } else if (sub_cmd == 4) {
            Util.clearCacheAd(context);
        } else if (sub_cmd == 6) {
            Util.clearCacheNotice(context);
        }
    }

    /**
     * @param msgBody
     */
    private void cellAllocateCancelack(final MsgBody msgBody) {
        cabzooRequester.cellAllocateCancelack(msgBody.order_id, new MyJsonResponseHandler(context) {
            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse, Object response) {
                // 删除订单（运单号、格口编号）
                pickupDao.delectPickupByBoxIdAndWaybill(msgBody.cell_code, msgBody.exp_code);
            }

            @Override
            protected Object parseResponse(String s, boolean b) throws Throwable {
                return MyJsonResonseStringParser.parseBodyStringAndThrows(s);
            }
        });
    }

    private void postCellAllocateBycab(final String box, final MsgBody msgBody) {
        cabzooRequester.cellAllocateBycab(BoxApp.getApp().CABINET_CODE, msgBody.express_id, msgBody.exp_code, box, new MyJsonResponseHandler<String>(context) {
            @Override
            protected String parseResponse(String s, boolean b) throws Throwable {
                return MyJsonResonseStringParser.parseBodyStringAndThrows(s);
            }

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse, String response) {
                pickupDao.updateWaybill(box, msgBody.exp_code);
            }
        });
    }

    /**
     * @param employBox     柜体已经占用格口集合
     * @param idle_cell_map 服务器可用格口二进制位图
     */
    public int opAlloceBox(Set<String> employBox, String idle_cell_map) {
        //取服务端和柜体空闲格口的交集
        LogUtil.debug(TAG, "idle_cell_map " + idle_cell_map);
        byte[] boxByte = Base64.decode(idle_cell_map, Base64.NO_WRAP);
        BoxInfo boxInfo = BoxUtil.allacBox(pickupDao, null, boxByte, 2);
        if (boxInfo == null) boxInfo = BoxUtil.allacBox(pickupDao, null, boxByte, 2); //分配失败，重试一次

        int result = 0;

        if (boxInfo != null) { //分配失败
            result = boxInfo.code;
        }
        LogUtil.debug(TAG, "收到指令 ，分配格口 " + "\n可用格口列表 " + "\n分配格口 " + result);
        return result;
    }

    /**
     * 柜体订单确认
     *
     * @param info
     */
    public void deliver_cabconfirm(final GoodsInfo info) {
        cabzooRequester.deliver_cabconfirm(new MyJsonResponseHandler<String>(context) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                try {
                    JSONObject jo = new JSONObject(rawJsonResponse);
                    int code = jo.getInt("code");
                    JSONObject body = jo.optJSONObject("body");
                    String order_id = body.optString("order_id");
                    String cell_code = body.optString("cell_code");
                    if (code == 0) {
                        String exp_code = body.optString("exp_code");
                        boolean result = pickupDao.updateStatus(order_id,
                                GoodsInfo.SUBMIT_STATUS_DONE);
                        // if (result) {
                        pickupDao.updatePushTypeAndSource(cell_code, 0);
                        // }
                        LogUtil.debug(TAG, "确认投递 更新投递状态 格口编号 " + cell_code + " result " + result);
                    } else if (code == 15109) { // 未完成，取消
                        cabzooRequester.deliver_cabcancel_ack(order_id, pickupDao);
                    } else if (code == 15110) {
                        boolean result = pickupDao.delectPickupByOrderId(order_id);
                        LogUtil.debug(TAG, "取消确认 释放 格口编号 " + cell_code + (result ? " 成功" : " 失败"));
                    }
                } catch (Exception e) {
                    LogUtil.error(TAG, "deliver_cabconfirm " + e.getLocalizedMessage());
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }

            @Override
            public void onStart() {
                LogUtil.debug(TAG, "推送 订单入库 ，打开箱体，" + info);
                super.onStart();
            }
        }, info.waybill, info.phoneNum, info.order_id);
    }

    private void pickupNotify(GoodsInfo info) {
        cabzooRequester.pickupNotify(info.phoneNum, BoxApp.getApp().CABINET_CODE, info.box_id, info.end_time,
                info.waybill, info.order_id, info.pickupPay + "",
                new MyJsonResponseHandler<String>(context) {

                    @Override
                    public void _onSuccess(int statusCode, Header[] headers,
                                           String rawJsonResponse, String response) {
                        Util.parsePickUp(context, rawJsonResponse, pickupDao);
                    }

                    @Override
                    protected String parseResponse(String rawJsonData, boolean isFailure)
                            throws Throwable {
                        return rawJsonData;
                    }
                });
    }

    /**
     * 更新手机号
     *
     * @param info
     * @return void
     * @throws
     */
    public void update_phone(final String consignee_phone, final GoodsInfo info) {
        cabzooRequester.modifyPhone(consignee_phone, BoxApp.getApp().CABINET_CODE, info.waybill, info.box_id,
                1, new MyJsonResponseHandler<String>(context) {

                    @Override
                    public void _onSuccess(int statusCode, Header[] headers,
                                           String rawJsonResponse, String response) {

                        try {
                            JSONObject jo = new JSONObject(rawJsonResponse);
                            int code = jo.getInt("code");
                            if (code == 0) {
                                JSONObject body = jo.optJSONObject("body");
                                info.pwd = body.optString("open_code");
                                String cell_code = body.optString("cell_code");
                                String exp_code = body.optString("exp_code");
                                info.phoneNum = consignee_phone;
                                pickupDao.updatePhone(info, cell_code, exp_code); //保证请求服务器接口成功后保存到服务器
//                                new MyToast(context, "修改成功", 0).show();
                                LogUtil.debug(TAG, "修改手机号成功");
                            }
                        } catch (JSONException e) {
                            LogUtil.error(TAG, "change phone error " + e);
                        }
                    }

                    @Override
                    protected String parseResponse(String rawJsonData, boolean isFailure)
                            throws Throwable {
                        return MyJsonResonseStringParser.parseBodyStringAndThrows(rawJsonData);
                    }
                });
    }

    /**
     * 批量打开格口
     *
     * @param context
     * @param handler
     * @param batch
     */
    public void batchOpenBox(final Context context, final Handler handler,
                             final Object[] batch, final int uid, final int src) {
        if (batch != null && batch.length > 0) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    MonitorService service = (MonitorService) context;
                    int tempPriority = service.getMaxPriority();
                    int priority = BoxUtil.PRIORITY_LOW;
                    if (tempPriority > BoxUtil.PRIORITY_LOW) { // 解决BUG#3819问题
                        priority = tempPriority;
                    }
                    for (Object boxid : batch) {
                        BoxUtil.openBoxSendBatch(context, handler, Constants.HANDLER_CALLBACK,
                                Constants.CMD_OPEN, boxid + "", "", uid, "", src, priority);
                        priority++;
                    }
                    LogUtil.debug(TAG, "收到指令 ，批量开箱,打开格口 " + batch.length + "个 , " + batch);
                }
            }).start();
        }
    }

    private GoodsInfo saveOrder(String cell_code, MsgBody msgBody,
                                int messageType) {
        GoodsInfo info = new GoodsInfo();
        info.order_id = msgBody.order_id;
        info.type = "PH-" + msgBody.courier_phone;
        info.deliveryType = Constants.REFER_DELIVER; // 投递
        info.loginID = msgBody.courier_phone; // 投递员手机号
        info.waybill = msgBody.exp_code;
        info.phoneNum = msgBody.consignee_phone;
        info.order_time = System.currentTimeMillis() + "";
        info.pwd = msgBody.open_code; // 小写
        info.box_id = cell_code;
        info.push_type = messageType;
        info.source = GoodsInfo.SOURCE_PUSH;
        if (messageType == PushType.TYPE_DELIVERY_OPEN) {
            info.isSubmit = GoodsInfo.SUBMIT_STATUS_NO;
        } else if (messageType == PushType.TYPE_ACCEPT_ORDER) {
            info.isSubmit = GoodsInfo.SUBMIT_STATUS_BEHIND;
        }

        GoodsInfo tempInfo = pickupDao.findByBoxId(cell_code);
        if (tempInfo != null) {
//            info.order_time = tempInfo.order_time ;
            pickupDao.delectPickupByBoxId(cell_code);
            LogUtil.warning(TAG, " 删除格口信息 " + tempInfo);
        }
        boolean result = pickupDao.insert(info);
        LogUtil.debug(TAG, "saveOrder " + (result ? "成功" : "失败") + " , 订单信息 " + info);
        return info;
    }

    /**
     * 柜体参数初始化
     *
     * @param upgrade_type
     * @return void
     * @throws
     */
    public void cabinet_init(final int upgrade_type) {
        LogUtil.debug(TAG, "cabinet_init-->upgrade_type=" + upgrade_type);
        cabzooRequester.cabinet_init(new MyJsonResponseHandler<String>(context) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                boolean flag = Util.parseUpdateInfo(context, rawJsonResponse, upgrade_type);
                if (flag) {
                    try {
                        LogUtil.debug(TAG, "发现新版本，开始下载新版本升级文件... ");
                        Util.ftpTools(context, Constants.FTP_PATH_UPGRADE, handler);
                    } catch (Exception e1) {
                        LogUtil.error(TAG, "cabinet_init error " + e1);
                    }
                } else {
                    if (upgrade_type != 0) {
                        displayErrorMsg("已经是最新版本，不需要升级");
                    }
                    LogUtil.debug(TAG, "已经是最新版本，不需要升级");
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }
        });
    }

    /**
     * 多个版本升级：软件 固件 系统
     *
     * @param upgrade_type
     * @return void
     * @throws
     */
    public void cabinet_updater(final int upgrade_type) {
        LogUtil.debug(TAG, "cabinet_updater-->upgrade_type=" + upgrade_type);
        cabzooRequester.cabinet_updater("", 0, new MyJsonResponseHandler<String>(context) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                boolean flag = Util.parseUpdate(context, rawJsonResponse, upgrade_type);
                if (flag) {
                    try {
                        LogUtil.debug(TAG, "发现新版本，开始下载新版本升级文件... ");
                        Util.ftpTools(context, Constants.FTP_PATH_UPGRADE, handler);
                    } catch (Exception e1) {
                        LogUtil.error(TAG, "cabinet_updater error " + e1);
                    }
                } else {
                    if (upgrade_type != 0) {
                        displayErrorMsg("已经是最新版本，不需要升级");
                    }
                    LogUtil.debug(TAG, "已经是最新版本，不需要升级");
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }
        });
    }

    /**
     * 单一版本升级： 固件 系统
     *
     * @param upgrade_type
     * @return void
     * @throws
     */
    public void cabinet_single_updater(final int upgrade_type, int current_version) {
        LogUtil.debug(TAG, "cabinet_single_updater-->upgrade_type=" + upgrade_type);
        cabzooRequester.cabinet_single_updater(upgrade_type, current_version, new MyJsonResponseHandler<String>(context) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                boolean flag = Util.parseSingleUpdate(context, rawJsonResponse, upgrade_type);
                if (flag) {
                    try {
                        LogUtil.debug(TAG, "发现新版本，开始下载新版本升级文件... ");
                        Util.ftpTools(context, Constants.FTP_PATH_UPGRADE, handler);
                    } catch (Exception e1) {
                        LogUtil.error(TAG, "cabinet_single_updater error " + e1);
                    }
                } else {
                    if (upgrade_type != 0) {
                        displayErrorMsg("已经是最新版本，不需要升级");
                    }
                    LogUtil.debug(TAG, "已经是最新版本，不需要升级");
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }
        });
    }

    /**
     * 快递员取回
     *
     * @param info
     */
    public void retrieve_order(final GoodsInfo info) {
        cabzooRequester.retrieve_order(info, info.deliveryPay,
                new MyJsonResponseHandler<String>(context) {

                    @Override
                    public void _onSuccess(int statusCode, Header[] headers,
                                           String rawJsonResponse, String response) {
                        Util.parseRepickUp(context, rawJsonResponse, pickupDao);
                    }

                    @Override
                    protected String parseResponse(String rawJsonData, boolean isFailure)
                            throws Throwable {
                        return rawJsonData;
                    }

                    @Override
                    public void onStart() {
                        LogUtil.debug(TAG, "提交快递员取回订单" + info);
                        super.onStart();
                    }
                });
    }

    public final static class Builder {
        private PickupDao pickupDao;
        private CabzooRequester cabzooRequester;
        private PushMsgDao pushMsgDao;
        private Context context;
        private Handler handler;

        public Builder(Context context) {
            this.context = context;
        }

        public Builder setPickupDao(PickupDao pickupDao) {
            this.pickupDao = pickupDao;
            return this;
        }

        public Builder setCabzooRequester(CabzooRequester cabzooRequester) {
            this.cabzooRequester = cabzooRequester;
            return this;
        }

        public Builder setPushMsgDao(PushMsgDao pushMsgDao) {
            this.pushMsgDao = pushMsgDao;
            return this;
        }

        public Builder setHandler(Handler handler) {
            this.handler = handler;
            return this;
        }

        public MonitorHandle build() {
            return new MonitorHandle(this);
        }
    }

    private void displayErrorMsg(String msg) {
        ToastUtils mToastUtils = new ToastUtils(context);
        mToastUtils.toast(msg , Toast.LENGTH_SHORT);
    }

}
package cn.jlb.pro.intelligentcabinet.app;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.text.TextUtils;
import android.widget.Toast;

import com.google.gson.reflect.TypeToken;
import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.FileAsyncHttpResponseHandler;

import org.apache.http.Header;
import org.json.JSONObject;

import java.io.File;
import java.lang.ref.WeakReference;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;

import cn.jlb.pro.core.config.CoreConstants;
import cn.jlb.pro.core.db.model.Advert;
import cn.jlb.pro.core.db.model.Cell;
import cn.jlb.pro.core.entity.AppInfo;
import cn.jlb.pro.core.net.Apis.PushType;
import cn.jlb.pro.core.net.MyJsonResonseStringParser;
import cn.jlb.pro.core.net.MyJsonResponseHandler;
import cn.jlb.pro.core.utils.CommonUtil;
import cn.jlb.pro.core.utils.FileUtils;
import cn.jlb.pro.core.utils.JsonUtils;
import cn.jlb.pro.core.utils.LogUtil;
import cn.jlb.pro.core.utils.NetUtils;
import cn.jlb.pro.core.utils.ToastUtils;
import cn.jlb.pro.core.utils.log.ILog;
import cn.jlb.pro.intelligentcabinet.config.CabinetConfigUtils;
import cn.jlb.pro.intelligentcabinet.config.Constants;
import cn.jlb.pro.intelligentcabinet.dao.AdvertDao;
import cn.jlb.pro.intelligentcabinet.dao.CellsDao;
import cn.jlb.pro.intelligentcabinet.dao.PickupDao;
import cn.jlb.pro.intelligentcabinet.dao.PushMsgDao;
import cn.jlb.pro.intelligentcabinet.dao.RechargeDao;
import cn.jlb.pro.intelligentcabinet.entity.AdvertInfo;
import cn.jlb.pro.intelligentcabinet.entity.BoxInfo;
import cn.jlb.pro.intelligentcabinet.entity.FtpDownloadInfo;
import cn.jlb.pro.intelligentcabinet.entity.GoodsInfo;
import cn.jlb.pro.intelligentcabinet.entity.NoticeInfo;
import cn.jlb.pro.intelligentcabinet.entity.RechargeInfo;
import cn.jlb.pro.intelligentcabinet.ui.activity.MainActivity;
import cn.jlb.pro.intelligentcabinet.utils.AnalyticsUtil;
import cn.jlb.pro.intelligentcabinet.utils.BoxUtil;
import cn.jlb.pro.intelligentcabinet.utils.PreferenceUtil;
import cn.jlb.pro.intelligentcabinet.utils.Util;
import cn.jlb.pro.intelligentcabinet.websvc.AccRequester;
import cn.jlb.pro.intelligentcabinet.websvc.CabzooRequester;
import cn.jlb.pro.intelligentcabinet.websvc.ChaosRequester;
import cn.jlb.pro.intelligentcabinet.websvc.GaeaRequester;

/**
 * 柜体后台调度服务
 *
 * @author wqr
 * @date 2014年12月11日 上午11:26:17
 */
public class MonitorService extends Service {
    /**
     * 通知UI，需要刷新数据
     */
    public static final String ACTION_DATA_REFRESH = "com.jlb.cabinet.data.refresh";
    /**
     * 测试时模拟底层消息
     */
    public static final String ACTION_CMD_DEBUG = "com.jlb.cabinet.serialport.debug";
    /**
     * 底层向UI发送的消息
     */
    public static final String ACTION_SERIALPORT_HANDLE = "com.jlb.cabinet.serialport.handle";

    /**
     * 向service发送消息，让service 直接调用底层接口
     */
    public static final String ACTION_SERIALPORT_SEND = "com.jlb.cabinet.serialport.send";
    /**
     * 向service发送消息，批量打个格口
     */
    public static final String ACTION_SERIALPORT_SEND_BATCH = "com.jlb.cabinet.serialport.send.batch";

    /**
     * 向底service送消息，告诉service 向服务器提交数据
     */
    public static final String ACTION_SUBMIT_DATA = "com.jlb.cabinet.submit.data";
    /**
     * 上传日记
     */
    public static final int ACTION_UPLOAD_LOG = 3;
    /**
     * 上传数据表
     */
    public static final int ACTION_UPLOAD_DATA = 6;
    /**
     * 下载数据表
     */
    public static final int ACTION_DOWNLOAD_ORDER = 7;
    /**
     * 定时任务：更新数据和缓存
     */
    public static final int ACTION_TIME_TASK = 8;
    /**
     * 调试环境用于发送的测试数据
     */
    public static final String KEY_TEST_DATA = "key_test_data";
    /**
     * 数据类型 广告
     */
    public static final int DATA_TYPE_AD = 1;
    /**
     * 数据类型 通知
     */
    public static final int DATA_TYPE_NOTICE = 2;

    /**
     * 安装包匹配规则
     */
    private static final String RULE_PATTERN_UI = "[a-zA-Z0-9\\-\\_\\.]+?UI[a-zA-Z0-9\\-\\_\\.]+?\\.apk";
    private static final String RULE_PATTERN_UPDATE = "[a-zA-Z0-9\\-\\_\\.]+?Update[a-zA-Z0-9\\-\\_\\.]+?\\.apk";
    private static final String RULE_PATTERN_FIRM = "[a-zA-Z0-9\\-\\_\\.]+?\\.MNF";
    private static final String CABINET_APK_PATH = "apk";


    /**
     * 升级类型 0初始化,1软件 2固件
     */
    public static int upgrade_type = 0;

    private final static ILog logger = LogUtil.getLogger("MonitorService");

    private ServiceHandler handler;
    private BoxApp app;
    private HandlerThread prepareBoxThread;
    private BoxQueueHandle boxQueueHandle;
    private Thread thread, threadDog;
    /**
     * 服务是否运行
     */
    private boolean running = false;
    private CellsDao cellsDao;
    private PushMsgDao pushMsgDao;
    private PickupDao pickupDao;
    private RechargeDao rechargeDao;
    private AdvertDao advertDao;
    private CabzooRequester cabzooRequester;
    private GaeaRequester gaeaRequester;
    private AccRequester accRequester;
    private ChaosRequester srvRequester;
    private SharedPreferences sp;
    private MonitorHandle monitorHandle;

    private ActivityManager am;
    private static MonitorService service;

    private MonitorReceiver monitorReceiver;

    static {
        try {
            if (!Constants.DEBUG) {
                // 加载动态库
                System.loadLibrary("JNIThreads");
            }
        } catch (Exception e) {
            logger.error("loadLibrary JNIThreads error:" + e);
        }
    }


    @Override
    public void onCreate() {
        super.onCreate();
        service = this;
        logger.debug("onCreate MonitorService=======");
        app = (BoxApp) getApplication();
        am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        sp = BoxApp.getApp().getSharedPreferences();
        handler = new ServiceHandler(service);
        startMainUI();
        running = true;

        // 创建dao
        cellsDao = new CellsDao(service);
        pushMsgDao = new PushMsgDao(service);
        pickupDao = new PickupDao(service);
        rechargeDao = new RechargeDao(service);
        advertDao = new AdvertDao(service);

        // 创建requester
        cabzooRequester = new CabzooRequester(service);
        gaeaRequester = new GaeaRequester(service);
        accRequester = new AccRequester(service);
        srvRequester = new ChaosRequester(this);
        ChaosRequester.domainList(srvRequester);

        // 监控线程
        thread = new Thread(new MonitorThread());
        // 心跳线程
        threadDog = new Thread(new DogThread());

        thread.start();
        threadDog.start();

        handler.postDelayed(new Runnable() {

            @Override
            public void run() {
                initJni();
            }
        }, 2000);

        prepareBoxThread = new HandlerThread("prepareboxthread");
        prepareBoxThread.start();
        boxQueueHandle = new BoxQueueHandle(service, prepareBoxThread.getLooper());

        monitorHandle = new MonitorHandle.Builder(service)
                .setPickupDao(pickupDao)
                .setCabzooRequester(cabzooRequester)
                .setHandler(handler)
                .setPushMsgDao(pushMsgDao)
                .build();

        registerCMDBoradcastReceiver();

        CommonUtil.startPushServer(this, app.CABINET_CODE);

        // 检查刚进行过升级标识
        if (CabinetConfigUtils.getUpgradeFlag(service)) {//检查是否刚进行过升级，并向服务端上报最新版本信息
            upgrade_type = 0;
            monitorHandle.cabinet_init(upgrade_type);
        }
    }

    private ToastUtils mToastUtils;

    private void initToast() {
        if (mToastUtils == null) {
            mToastUtils = new ToastUtils(this);
        }
    }

    /**
     * 显示提示信息
     *
     * @param msg 消息内容
     */
    protected void displayErrorMsg(String msg) {
        initToast();
        mToastUtils.toast(msg, Toast.LENGTH_LONG);
    }

    /**
     * 打开格口消息队列
     */
    private Queue<BoxInfo> prepareBoxQueue = new PriorityQueue<BoxInfo>(11,
            new Comparator<BoxInfo>() {

                @Override
                public int compare(BoxInfo o1, BoxInfo o2) {
                    int priority1 = o1.priority;
                    int priority2 = o2.priority;
                    if (priority1 > priority2) {
                        return 1;
                    } else if (priority1 < priority2) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            });

    // 初始化JNI环境
    private void initJni() {
        if (!Constants.DEBUG) {
            try {
                File device = new File("/dev/s3c2410_serial3");
                if (!device.canRead() || !device.canWrite()) {
                    /* Missing read/write permission, trying to chmod the file */
                    Process su;
                    su = Runtime.getRuntime().exec("su");
                    String cmd = "chmod 666 " + device.getAbsolutePath() + "\n" + "exit\n";
                    su.getOutputStream().write(cmd.getBytes());
                    if (!device.canRead() || !device.canWrite()) {
                        logger.error("initJni : SecurityException ");
                        throw new SecurityException();
                    }
                }
            } catch (Exception e) {
                logger.error("initJni :" + e);
                throw new SecurityException();
            }

            startThread();
            logger.debug("startThread()");
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        logger.debug("onStartCommand MonitorService=======");
        // return super.onStartCommand(intent, flags, startId);
        return START_STICKY;
    }

    /**
     * 启动主界面
     */
    private void startMainUI() {
        Intent intent = new Intent(MonitorService.this, MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
    }

    // 本地方法 启动串口服务
    public native void startThread();

    // 本地方法 执行串口命令
    public static native void sendCMD(String str);

    // 由JNI中的线程回调
    public static void receiveData(String str) {
        logger.debug("receiveData------>" + str);
        if (!TextUtils.isEmpty(str) && str.length() > 4) {
            Message msg = service.handler.obtainMessage();
            msg.what = 999;
            msg.obj = str;
            msg.sendToTarget();
        }
    }

    /**
     * 调用串口服务命令
     *
     * @param cmdType 指令
     * @param data    数据
     */
    public void SerialPortMethods(String cmdType, String data) {
        try {
            logger.debug(cmdType + "," + data + " ");
            if (cmdType.equals(Constants.CMD_OPEN)) {// 打开 "OPEN,"+格口号+空格
                BoxInfo info = prepareBoxQueue.poll();
                logger.info("priorityQueue -->" + prepareBoxQueue);
                if (info != null && info.code > 0) {
                    logger.info("info -->" + info);
                    sendCMD(Constants.CMD_OPEN + "," + info.code + " ");
                }
            } else if (cmdType.equals(Constants.CMD_TOTAL)) {// 格口总数
                sendCMD(Constants.CMD_TOTAL + "," + data + " ");
            } else if (cmdType.equals(Constants.CMD_STUDY)) {// 学习开始
                sendCMD(Constants.CMD_STUDY + "," + data + " ");
            } else if (cmdType.equals(Constants.CMD_STOP)) {// 学习结束 "SPPA"
                sendCMD(Constants.CMD_STOP);
            } else if (cmdType.equals(Constants.CMD_RESETTOTAL)) {// 恢复设备默认值
                sendCMD(Constants.CMD_RESETTOTAL);
            } else if (cmdType.equals(Constants.CMD_OPENDOOR)) {// 开屏 心跳 "CHKL"
                sendCMD(Constants.CMD_OPENDOOR);
            } else if (cmdType.equals(Constants.CMD_VERSION)) {
                sendCMD(Constants.CMD_VERSION);
            } else if (cmdType.equals(Constants.CMD_UPDATESYS)) {
                sendCMD(Constants.CMD_UPDATESYS + "," + data);
            } else if (cmdType.equals(Constants.CMD_SAVESYS)) {
                sendCMD(Constants.CMD_SAVESYS);
            } else if (cmdType.equals(Constants.CMD_BREAKCONN)) {
                sendCMD(Constants.CMD_BREAKCONN);
            } else if (cmdType.equals(Constants.RECMD_YPAY)) {
                sendCMD(Constants.RECMD_YPAY);
            } else if (cmdType.equals(Constants.RECMD_NPAY)) {
                sendCMD(Constants.RECMD_NPAY);
            } else if (cmdType.equals(Constants.RECMD_RDLG)) {
                sendCMD(Constants.RECMD_RDLG);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 升级UPDATE
     */
    private void installUpdate() {
        File file = new File(Constants.update_apk_path);
        boolean needupgrade = CommonUtil.needUpdate(service, Constants.UPDATE_VERSION,
                Constants.update_apk_path);
        if (needupgrade) {
        logger.debug("CabinetUpdate 有新版本，开始升级 ");
        boolean flag = CommonUtil.slientInstall(file);
        logger.debug("CabinetUpdate程序安装结束  " + (flag ? "成功" : "结束"));
        updateAppInfo();
        } else {
            displayErrorMsg("CabinetUpdate 当前版本与服务端版本一致，如需升级请联系服务端管理员！");
            logger.debug("CabinetUpdate 当前版本与服务端版本一致，如需升级请联系服务端管理员！");
        }
    }

    private void updateAppInfo() {
        List<AppInfo> apps = CommonUtil.getAppInfo(this);
        for (AppInfo app : apps) {
            if (app.packageName.equals(CoreConstants.PACKAGE_NAME_CABINET)) {
                Constants.CABINET_VERSION = app.versionCode;
            } else if (app.packageName.equals(CoreConstants.PACKAGE_NAME_UPDATE)) {
                Constants.UPDATE_VERSION = app.versionCode;
            }
        }
    }

    /**
     * 批量提交未提交服务器数据 1、投递待提交订单 2、未完成订单 3、退回待提交订单 4、取件待提交 5、充值待提交
     *
     * @param isMainActivity 是否MainActivity
     */
    private void sendUnSubmitInfos(boolean isMainActivity) {// 多次性投递操作
        if (NetUtils.isConnected(service)) { // 1、MainActivity
            //查找APP投递，超时的订单
            List<GoodsInfo> appOrders = pickupDao.findPushInvalidOrder();
            if (appOrders != null || !appOrders.isEmpty()) {
                for (GoodsInfo info : appOrders) {
                    if (info.push_type == PushType.TYPE_ALLOCATEBYCAB) {
                        boolean cabinetLogin = !TextUtils.isEmpty(BoxApp.getApp().getLogin().loginID);
                        boolean orderTimeOut = System.currentTimeMillis() - Long.parseLong(info.order_time) > 20 * 60 * 1000;
                        if ((!cabinetLogin) && orderTimeOut) { //订单入库时间，当时间超过20分钟后无更新，进行删除
                            pickupDao.delectPickupByBoxId(info.box_id);
                        }
                    } else if (info.push_type == PushType.TYPE_ALLOCATE_CANCELACK) {
//                        pickupDao.delectPickupByBoxId(info.box_id);
                    }

                    logger.warn("存在待取消的订单 " + info);
                }
            }

            // 运行中 并且网络可用
            List<GoodsInfo> infos = pickupDao.findUnSubmitInfos();
            if (infos == null || infos.isEmpty()) {
            } else {
                logger.debug("存在未提交订单数据，大小为 size:" + infos.size());
                for (GoodsInfo info : infos) { // 取件待提交订单
                    if (info.source == GoodsInfo.SOURCE_CABINET && isMainActivity) { // 柜体操作产生的数据
                        if (info.isPickup == GoodsInfo.PICKUP_STATUS_DONE) {
                            if (info.phoneNum.equals(info.pickupPhone)) { // 收件人取件
                                pickupNotify(info);
                            } else { // 快递员取回
                                monitorHandle.retrieve_order(info);
                            }
                        } else if (info.isSubmit == GoodsInfo.SUBMIT_STATUS_BEHIND) { // 投递待提交
                            deliveryNotify(info);
                        } else if (info.isSubmit == GoodsInfo.SUBMIT_STATUS_NO) { // 未完成订单
                            deliveryNotify(info);
                        } else {
                            logger.debug("待提交订单异常  " + info);
                        }
                    } else if (info.source == GoodsInfo.SOURCE_PUSH) { // 推送消息产生的数据
                        logger.debug("提交柜体订单" + info);
                        if (info.push_type == PushType.TYPE_DELIVERY_OPEN
                                && info.isSubmit == GoodsInfo.SUBMIT_STATUS_BEHIND) {
                            logger.debug("订单确认  order " + info);
                            monitorHandle.deliver_cabconfirm(info);
                        } else if (info.push_type == PushType.TYPE_ACCEPT_ORDER
                                && info.isSubmit == GoodsInfo.SUBMIT_STATUS_BEHIND) {
                            // 柜体接受订单确认
                            cabzooRequester.delivery_cab_recv_ack(info.order_id, pickupDao);
                        } else if (info.isPickup == GoodsInfo.PICKUP_STATUS_DONE) {
                            if (info.push_type == PushType.TYPE_CANCEL_CONSIGNEE_OPEN
                                    && TextUtils.isEmpty(info.box_id)) {
                                logger.debug("打开箱体失败  order " + info);
                            } else if (info.push_type == PushType.TYPE_CANCEL_CONSIGNEE_OPEN) {
                                cabzooRequester.deliver_cabcancel_ack(info.order_id, pickupDao);
                                logger.debug("取消投递  order " + info);
                            } else if (info.push_type == PushType.TYPE_CONSIGNEE_OPEN) {
                                pickupNotify(info);
                            } else if (info.push_type == PushType.TYPE_FALLBACK_OPEN) {
                                cabzooRequester.withdraw_confirm(info.order_id, pickupDao);
                                logger.debug("退回  order " + info);
                            } else {
                                if (info.phoneNum.equals(info.pickupPhone)) { // 收件人取件
                                    pickupNotify(info);
                                } else { // 快递员取回
                                    monitorHandle.retrieve_order(info);
                                }
                            }
                        } else if (info.push_type == PushType.TYPE_PASSWORD_UPDATE) {
//                            monitorHandle.update_phone(info.phoneNum, info); //循环提交订单，修改手机号实时性高，事务起始应做超时处理
                        } else if (info.push_type == PushType.TYPE_DELIVERY_OPEN && info.isValid == -1) { // 远程开箱失败
                            push_open_fail(info.order_id);
                            logger.debug("远程开箱失败 " + info);
                        }
                    }
                }
            }

            if (isMainActivity) {
                List<RechargeInfo> rinfos = rechargeDao.findRecharge();
                for (RechargeInfo info : rinfos) {
                    // 需进一步区分业务：用户充值、用户支付、快递员充值
                    info.isSubmit = RechargeInfo.IS_SUBMIT_BACKGROUND;
                    if (info.amount > 0) {
                        postRecharge(info);
                    } else {// 删除不可用订单
                        rechargeDao.delectRechargeOrder(info.order_id);
                        logger.info("删除 充值订单 :" + info);
                    }
                }
            }
        } else {
            logger.debug("网络不可用");
        }

    }

    /**
     * 上传日记
     */
    private void uploadLog() {
        if (!Constants.DEBUG) {
            SerialPortMethods(Constants.RECMD_RDLG, null);
        }
        try {
            Util.ftpTools(service, Constants.FTP_PATH_LOG, handler);
        } catch (Exception e) {
            logger.error("上传日志失败 " + e);
        }
    }

    @Override
    public void onDestroy() {
        running = false;
        unregisterReceiver(monitorReceiver);
        gaeaRequester.cancel();
        cabzooRequester.cancel();
        accRequester.cancel();
        srvRequester.cancel();
        if (prepareBoxThread != null) {
            prepareBoxThread.quit();
        }
        service = null;
        logger.debug("onDestroy MonitorService=======");
        super.onDestroy();
    }

    /**
     * 向队列添加指令
     *
     * @param cmdType  指令
     * @param data     数据
     * @param priority 优先级
     */
    private void addBoxQueue(String cmdType, String data, int priority) {
        logger.info("priority " + priority + " ,data " + data + ",cmd " + cmdType);
        BoxInfo info = new BoxInfo();
        info.code = Integer.parseInt(data);
        info.priority = priority;
        prepareBoxQueue.add(info);

        Message msg = boxQueueHandle.obtainMessage();
        Bundle bundle = new Bundle();
        bundle.putString("cmdType", cmdType);
        bundle.putString("data", data);
        msg.setData(bundle);
        boxQueueHandle.sendMessage(msg);
    }

    /**
     * 获取
     *
     * @return
     */
    public int getMaxPriority() {
        BoxInfo info = prepareBoxQueue == null ? null : prepareBoxQueue.peek();
        return info == null ? BoxUtil.PRIORITY_LOW : (info.priority + prepareBoxQueue.size() - 1);
    }

    public void doCallBack(String str) {
        if (str == null) {
            logger.warn("doCallBack str is null !");
            return;
        }
        logger.debug("doCallBack " + str);
        String[] cmd = str.split(",");
        if (Constants.RECMD_COMU.equals(str)) {
            sendCMD(Constants.CMD_OPENDOOR);// 心跳;
        } else if (Constants.RECMD_READNUMBER.equals(cmd[0])) {
            Constants.CABINET_NUMBER = cmd[1].trim();
            logger.debug("固件版本 " + Constants.CABINET_NUMBER);
        } else if (Constants.RECMD_CLOS.equals(cmd[0])) {
            monitorHandle.closeBox(app, str);
        } else {
            if (Constants.RECMD_OPEN.equals(cmd[0])) { // 区分来源 柜体操作
                monitorHandle.openBox(app, str);
            }
            handleSerialport(str);
        }
    }

    /**
     * @param messageData 规矩数据
     */
    private void handleSerialport(String messageData) {
        Intent intent = new Intent(ACTION_SERIALPORT_HANDLE);
        intent.putExtra("cmd", messageData);
        sendBroadcast(intent);
    }

    /**
     * 注册接收器 模拟箱门打开、关闭、UI与service 通信
     */
    private void registerCMDBoradcastReceiver() {
        if (monitorReceiver == null) {
            monitorReceiver = new MonitorReceiver(service);
        }
        IntentFilter myIntentFilter = new IntentFilter();
//        if (Constants.DEBUG) {
        myIntentFilter.addAction(ACTION_CMD_DEBUG);
//        }
        myIntentFilter.addAction(ACTION_SERIALPORT_SEND);
        myIntentFilter.addAction(ACTION_SERIALPORT_SEND_BATCH);
        myIntentFilter.addAction(ACTION_SUBMIT_DATA);
        myIntentFilter.addAction(CoreConstants.ACTION_PUSH);
        registerReceiver(monitorReceiver, myIntentFilter);
    }

    // D:\android_project\jlb\IntelligentCabinet0612B\IntelligentCabinet
    // javah -classpath bin\classes -d jni
    // cn.jlb.pro.intelligentcabinet.service.MonitorService

    // cd D:/android_project/jlb/IntelligentCabinet0612B/IntelligentCabinet

    /**
     * 扫码枪投递时，上报打开箱门失败
     *
     * @param order_id 订单ID
     */
    private void push_open_fail(String order_id) {
        cabzooRequester.deliver_open_fail(new MyJsonResponseHandler<String>(service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                try {
                    JSONObject body = new JSONObject(response);
                    String order_id = body.optString("order_id");
                    GoodsInfo info = pickupDao.findByOrderID(order_id);
                    if (info != null) {
                        pickupDao.delectPickupByBoxId(info.box_id);
                    }
                } catch (Exception e) {
                    logger.error("push_open_fail " + e);
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return MyJsonResonseStringParser.parseBodyStringAndThrows(rawJsonData);
            }
        }, order_id);
    }

    /**
     * 获取广告列表
     *
     * @param today 时期
     */
    private void getAdvertList(final String today) {
        gaeaRequester.getAdvertList(new MyJsonResponseHandler<String>(service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                if (!TextUtils.isEmpty(response)) {
                    List<AdvertInfo> advertResult = JsonUtils.fromJson(response,
                            new TypeToken<List<AdvertInfo>>() {
                            });
                    if (advertResult != null && !advertResult.isEmpty()) {
                        downloadAdinfo(advertResult);
                        advertDao.clearData(Advert.class);
                        advertDao.insertList(advertResult);
                        PreferenceUtil.putString(service, Constants.KEY_GET_AD_FLAG, today);
                        Intent intent = new Intent(ACTION_DATA_REFRESH);
                        intent.putExtra("data", DATA_TYPE_AD);
                        sendBroadcast(intent);
                        logger.debug(" 获取广告 " + today);
                    }
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return MyJsonResonseStringParser.parseBodyStringAndThrows(rawJsonData);
            }
        }, app.CABINET_CODE);
    }

    /**
     * 将视频广告添加到下载管理器
     *
     * @param info      广告对象
     * @param localPath 本地路径
     */
    private void addDownloadTask(final AdvertInfo info, final String localPath) {
        logger.debug("vedio begin download " + localPath);
        AsyncHttpClient client = new AsyncHttpClient();
        client.get(info.resource_url, new FileAsyncHttpResponseHandler(service) {

            @Override
            public void onFailure(int statusCode, Header[] headers, Throwable throwable, File file) {
                info.status = AdvertInfo.STATUS_DEFAULT;
                advertDao.update(info);
                logger.debug("onFailure filepath " + file.getAbsolutePath());
            }

            @Override
            public void onSuccess(int statusCode, Header[] headers, File file) {
                File file2 = new File(localPath);
                boolean result = FileUtils.copy(file, file2);
                info.status = AdvertInfo.STATUS_FINISH;
                advertDao.update(info);
                logger.debug("onSuccess and copy " + result + " , " + " filepath "
                        + file.getAbsolutePath());
            }

            @Override
            public void onProgress(long bytesWritten, long totalSize) {
                super.onProgress(bytesWritten, totalSize);
            }
        });
    }

    /**
     * 获取价格配置信息
     */
    private void tariffconf() {
        cabzooRequester.tariffconf(new MyJsonResponseHandler<String>(service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                ArrayList<Cell> cellsResult = JsonUtils.fromJson(response,
                        new TypeToken<ArrayList<Cell>>() {
                        });
                if (cellsResult != null) {
                    cellsDao.deleteAll();

                    if (cellsResult.size() > 0) {
                        for (Cell cells : cellsResult) {
                            cellsDao.save(cells);
                        }
                    }
                    if (running) {
                        logger.debug("insert Tariff info success ");
                        // 某一天的请求标识
                        PreferenceUtil.putString(service, Constants.KEY_TARIFF_FLAG,
                                Constants.SDF.format(new Date()));
                    }
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return MyJsonResonseStringParser.parseBodyStringAndThrows(rawJsonData);
            }
        });
    }

    /**
     * 上传数据表
     *
     * @param infos 订单列表
     */
    private void uploadCaborder(List<GoodsInfo> infos) {
        cabzooRequester.uploadCaborder(infos, new MyJsonResponseHandler<String>(service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                Util.parseUploadOrder(service, rawJsonResponse, pickupDao, null);
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }
        });
    }

    /**
     * 获取公告信息
     */
    private void getNoticeList() {
        gaeaRequester.getNoticeList(app.CABINET_CODE, new MyJsonResponseHandler<String>(
                service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                NoticeInfo notice = getGson().fromJson(response, NoticeInfo.class);
                if (notice != null) {
                    List<NoticeInfo.Notice> noticeList = notice.list;
                    if (noticeList != null && !noticeList.isEmpty()) {
                        PreferenceUtil.putString(service, Constants.KEY_NOTICE_CONTENT, response);
                        PreferenceUtil.putString(service, Constants.KEY_NOTICE_FLAG,
                                Constants.SDF.format(new Date()));
                        logger.debug("noticeList " + noticeList);
                    }
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return MyJsonResonseStringParser.parseBodyStringAndThrows(rawJsonData);
            }
        });
    }

    /**
     * 恢复数据表
     */
    private void downloadCaborder() {
        cabzooRequester.downloadCaborder(new MyJsonResponseHandler<String>(service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                Util.recoverData(service, rawJsonResponse);
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }
        });
    }

    /**
     * 下载广告信息
     *
     * @param advertResult 广告列表
     */
    private void downloadAdinfo(List<AdvertInfo> advertResult) {
        for (AdvertInfo a : advertResult) {
            if (a.type == AdvertInfo.TYPE_VIDEO) {
                String localDerectory = FileUtils.getDerectory(service, Constants.MEDIA_PATH);
                if (!TextUtils.isEmpty(localDerectory)) {
                    try {
                        URL url = new URL(a.resource_url);
                        String fileName = new File(url.getFile()).getName();
                        String localPath = localDerectory + fileName;
                        a.forward_url = localPath;
                        long avaiableSize = FileUtils.getAvaiableSize(localDerectory);
                        if (a.status != AdvertInfo.STATUS_FINISH && avaiableSize > 100 * 1024 * 1024) {// 目录可用空间大于100M
                            logger.debug("添加下载任务 目录可用空间 " + avaiableSize + " ,"
                                    + a.resource_url + " local " + localPath);
                            addDownloadTask(a, localPath);
                        } else {
//                            logger.debug("文件存在 目录可用空间 " + avaiableSize + " ,"
//                                    + a.resource_url + " local " + localPath);
                        }
                    } catch (MalformedURLException e) {
                        logger.error("downloadAdinfo " + e + " " + a.resource_url);
                    }
                } else {
                    logger.error("文件创建失败 " + Constants.MEDIA_PATH);
                }
            }
        }
    }

    /**
     * 提交充值订单
     *
     * @param info 订单信息
     */
    private void postRecharge(final RechargeInfo info) {
        accRequester.postRecharge(new MyJsonResponseHandler<String>(service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                try {
                    JSONObject ob = new JSONObject(rawJsonResponse);
                    int code = ob.getInt("code");
                    if (code == 0) {
                        JSONObject body = ob.optJSONObject("body");
                        int balance = body.optInt("balance");
                        // app.getLogin().balance = balance;
                        int amount = body.optInt("amount");
                        // String serial_no = body.getString("serial_no");
                        rechargeDao.updateRecharge(info.order_id,
                                RechargeInfo.IS_SUBMIT_BACKGROUND, amount); // 更新订单为已完成
                    }
                } catch (Exception e) {
                    logger.error(" postRecharge " + e);
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }

            @Override
            public void onStart() {
                // logger.info( "提交 充值订单 :" + info);
                super.onStart();
            }
        }, info);
    }

    /**
     * 取件通知
     *
     * @param info 订单信息
     */
    private void pickupNotify(final GoodsInfo info) {
        cabzooRequester.pickupNotify(info.phoneNum, app.CABINET_CODE, info.box_id,
                info.end_time, info.waybill, info.order_id, info.pickupWay + "",
                new MyJsonResponseHandler<String>(service) {

                    @Override
                    public void _onSuccess(int statusCode, Header[] headers,
                                           String rawJsonResponse, String response) {
                        Util.parsePickUp(service, rawJsonResponse, pickupDao);
                    }

                    @Override
                    protected String parseResponse(String rawJsonData, boolean isFailure)
                            throws Throwable {
                        return rawJsonData;
                    }

                    @Override
                    public void onStart() {
                        logger.debug("取件开箱  order " + info);
                        super.onStart();
                    }
                });
    }

    private void deliveryNotify(final GoodsInfo info) {
        ArrayList<GoodsInfo> infos = new ArrayList<GoodsInfo>();
        infos.add(info);
        cabzooRequester.postDeliveryNotify(new MyJsonResponseHandler<String>(service) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                Util.updateGoodInfo(rawJsonResponse, pickupDao); // 更新isSubmit=0
                // 的状态
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }

            @Override
            public void onStart() {
                logger.debug("提交投递订单开始  isSubmit " + info.isSubmit + info);
                super.onStart();
            }
        }, infos);
    }

    /**
     * 处理message 信息
     *
     * @param msg Message
     */
    private void handleMessage(Message msg) {
        switch (msg.what) {
            case Constants.HANDLER_FTP_CALLBACK: // FTP 下载信息
                if (msg.obj == null) return;
                try {
                    List<FtpDownloadInfo> infos = (List<FtpDownloadInfo>) msg.obj;
                    if (infos == null) {
                        logger.warn("没有可用更新，请检查服务器 升级文件 " + Constants.FTP_HOST);
                    } else {
                        for (FtpDownloadInfo info : infos) {
                            if (upgrade_type == 1) {
                                if (Util.checkFile(info.fileName, RULE_PATTERN_UI)) {
                                    Editor editor = sp.edit();
                                    editor.putString(CABINET_APK_PATH, info.filePath);
                                    editor.apply();
                                    Constants.cabinet_apk_path = info.filePath;
                                } else if (Util.checkFile(info.fileName, RULE_PATTERN_UPDATE)) {
                                    Constants.update_apk_path = info.filePath;
                                }
                            } else if (upgrade_type == 2) {
                                if (Util.checkFile(info.fileName, RULE_PATTERN_FIRM)) {
                                    Constants.firm_file_path = info.filePath;
                                }
                            }
                        }
                        logger.debug("ftp 下载成功 " + infos);
                    }

                    if (upgrade_type == 1) {
                        // TODO
                        File update_apk = new File(Constants.update_apk_path);
                        if (update_apk.exists()) {
                            CabinetConfigUtils.setUpgradeFlag(service, true);
                            installUpdate();
                        } else {
                            logger.error("CabinetUpdate 文件不存在 。。。");
                        }

                        handler.sendEmptyMessageDelayed(Constants.CMD_UPDATE_INSTALL_FINISH, 2000);
                    } else if (upgrade_type == 2) {
                        File file = new File(Constants.firm_file_path);
                        if (file.exists()) {
                            CabinetConfigUtils.setUpgradeFlag(service, true);
                            // addBoxQueue(Constants.CMD_UPDATESYS,
                            // Constants.firm_file_path, 0);
                            BoxUtil.sendSerialMessage(service, handler, Constants.HANDLER_CALLBACK,
                                    Constants.CMD_UPDATESYS, Constants.firm_file_path, 0);
                            logger.debug("开始升级固件，请稍候，本地路径：" + Constants.firm_file_path);
                            displayErrorMsg("开始升级固件，请稍候，本地路径：" + Constants.firm_file_path);
                        } else {
                            displayErrorMsg("文件不存在 " + Constants.firm_file_path);
                            logger.error("文件不存在 " + Constants.firm_file_path);
                        }
                    }
                } catch (Exception e) {
                    logger.error("handler_ftp_callback ERROR:" + e);
                }
                upgrade_type = 0;
                logger.debug("handler_ftp_callback " + msg.obj);
                break;
            case Constants.HANDLER_FTP_UpBACK: // 上传口服务返回调用码
                if (msg.obj == null) return;
                try {
                    boolean flag = (Boolean) msg.obj;
                    if (flag) {
                        logger.debug("推送 上传日志成功!");
                    } else {
                        logger.debug("推送 上传日志失败!");
                    }
                } catch (Exception e) {
                    logger.error("HANDLER_FTP_UpBACK ERROR:" + e.getMessage());
                }

                logger.debug("handler_ftp_upback " + msg.obj);
                break;
            case ACTION_UPLOAD_LOG:
                uploadLog();
                break;
            case ACTION_UPLOAD_DATA:
                List<GoodsInfo> infos = pickupDao.findALL();
                uploadCaborder(infos);
                break;
            case Constants.CMD_UPDATE_INSTALL_FINISH:
                // update 安装完成，开始升级 cabinet
                boolean needupgrade = CommonUtil.needUpdate(service, Constants.CABINET_VERSION,
                        Constants.cabinet_apk_path);
                if (needupgrade) {
                    logger.debug("CabinetUI 需要升级 ，开始升级，屏幕可能闪退。。。");
                    displayErrorMsg("CabinetUI 需要升级 ，开始升级，屏幕可能闪退。。。");
                    Intent intent = new Intent(CoreConstants.ACTION_UPDATE);
                    intent.putExtra("apkfile", Constants.cabinet_apk_path);
                    intent.setFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
                    service.sendBroadcast(intent);
                } else {
                    displayErrorMsg("CabinetUI 当前版本与服务端版本一致，如需升级请联系服务端管理员！");
                    logger.debug("CabinetUI 当前版本与服务端版本一致，如需升级请联系服务端管理员！");
                }
                upgrade_type = 0;
                logger.debug("cmd_update_install_finish " + msg.obj);
                break;
            case ACTION_DOWNLOAD_ORDER:
                downloadCaborder();
                break;
            case ACTION_TIME_TASK:
                if (msg.obj == null) return;
                boolean isMainActivity = (Boolean) msg.obj;
                sendUnSubmitInfos(isMainActivity);
                updateCache();
                break;
            case 999:
                if (msg.obj == null) return;
                String cmds = (String) msg.obj;
                doCallBack(cmds);
                break;
        }
    }

    /**
     * 更新柜体缓存
     */
    private void updateCache() {
        // 每天上传日记
        String today = Constants.SDF.format(new Date());
        String upload_log_date = PreferenceUtil.getString(service, Constants.KEY_UPLOADLOG_FLAG);
        if (!upload_log_date.equals(today)) { // 当天还没上传过日记，则上传
            uploadLog();
            PreferenceUtil.putString(service, Constants.KEY_UPLOADLOG_FLAG, today);
            logger.debug(" 上传日记 " + today);
        } else {
            // logger.debug( "上传日记最后 日期为 " + today);
        }

        // 此种获取方式，在柜体量偏大的时候，回导致服务端压力增大
        String ad_log_date = PreferenceUtil.getString(service, Constants.KEY_GET_AD_FLAG);
        if (!ad_log_date.equals(today)) { // 当前没有获取最新的广告则获取最新广告
            getAdvertList(today);
        } else {
            List<AdvertInfo> ads = advertDao.findALL();
            downloadAdinfo(ads); // 文件存在，找出未下载完的文件开始下载
            // logger.debug( "获取广告最后 日期为 " + today);
        }

        // 初始化信息 每天获取一次
        String post_init_flag = PreferenceUtil.getString(service, Constants.KEY_INIT_FLAG);
        if (!today.equals(post_init_flag)) {
            upgrade_type = 0;
            monitorHandle.cabinet_init(upgrade_type);
        } else {
            // logger.debug( "初始化信息最后 日期为 " + today);
        }

        // 比较柜体的时间和服务器时间差 每天比较一次
        String verify_time_flag = PreferenceUtil.getString(service, Constants.KEY_VERIFY_TIME_FLAG);
        if (!today.equals(verify_time_flag)) {
            cabzooRequester.verify_time();
        } else {
            // logger.debug( "比较柜体的时间和服务器时间差最后 日期为 " +
            // today);
        }

        String notice_post_flag = PreferenceUtil.getString(service, Constants.KEY_NOTICE_FLAG);
        if (notice_post_flag.equals(today)) {
//            logger.debug("notice存在 最后更新日期 " + today);
        } else {
            getNoticeList();// 请求网络获取公告信息
        }

        // 比较柜体的时间和服务器时间差 每天比较一次
        String request_domain_list = PreferenceUtil.getString(service, Constants.KEY_DOMAIN_FLAG);
        if (!today.equals(request_domain_list)) {
            ChaosRequester.domainList(srvRequester);
        } else {
            // logger.debug( "比较柜体的时间和服务器时间差最后 日期为 " +
            // today);
        }

        // 计费信息 每天获取一次
        // String tariff_post_flag =
        // SharePreferenceUtil.getString(service,
        // Constants.KEY_TARIFF_FLAG, "");
        // if (tariff_post_flag.equals(today)) {
        // // logger.debug( "计费数据最后 日期为 " + today);
        // } else {
        // Message msg = handler.obtainMessage();
        // msg.what = REQUEST_TARIFFCONF;
        // msg.sendToTarget();
        // }

        // 每天清理一次
        String clearDataflag = PreferenceUtil.getString(service, Constants.KEY_CLEAR_FLAG);
        if (!clearDataflag.equals(today)) {
            pushMsgDao.deleteAll();
            PreferenceUtil.putString(service, Constants.KEY_CLEAR_FLAG, today);
        } else {
            // logger.debug( "清除推送消息最后 日期为 " + today);
        }
    }

    /**
     * handle
     */
    private static final class ServiceHandler extends Handler {
        WeakReference<MonitorService> wrService;

        ServiceHandler(MonitorService service) {
            wrService = new WeakReference<MonitorService>(service);
        }

        @Override
        public void handleMessage(Message msg) {
            // logger.debug( "handleMessage msg " + msg);
            MonitorService service = wrService.get();
            if (service != null) {
                service.handleMessage(msg);
            }
        }
    }

    private final class MonitorThread implements Runnable {

        @Override
        public void run() {
            try {
                Thread.sleep(500);
                // logger.error( "CHKL=====>启动开屏");
                // sendCMD(Constants.CMD_OPENDOOR);
                if (!Constants.DEBUG) {
                    logger.debug("GTVS=====>读取唯 一设备号");
                    sendCMD(Constants.RECMD_READNUMBER);
                }

                while (running) {// !Thread.currentThread().isInterrupted()
                    String cabinet = CabinetConfigUtils.getCabinetCode(service);
                    if (cabinet.equals(Constants.CABINET_DEFAULT) || TextUtils.isEmpty(cabinet)) { //柜体无效
                        logger.error("=======柜体无效=======" + cabinet);
                    } else {
//                        logger.info( "MonitorThread running=======");
                        List<RunningTaskInfo> runningTasks = am.getRunningTasks(1);
                        RunningTaskInfo rti = runningTasks.get(0);
                        ComponentName component = rti.topActivity;
                        final String actName = component.getClassName();

                        if (!actName.contains("cn.jlb.pro.intelligentcabinet")) {
                            handler.postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    startMainUI();
                                }
                            }, 3000);
                        }

                        Message msg = handler.obtainMessage();
                        msg.what = ACTION_TIME_TASK;
                        msg.obj = actName.equals(MainActivity.class.getName());
                        msg.sendToTarget();
                    }
                    Thread.sleep(Constants.SERVICE_THREAD_TIME);
                }
            } catch (Exception e) {
                e.printStackTrace();
                logger.error(" monitor service stoped with error " + e);
                stopSelf();
            }
        }
    }

    private final class DogThread implements Runnable {

        @Override
        public void run() {

            try {
                while (running) {
                    Thread.sleep(30000);
                    // 心跳 开屏
                    if (!Constants.DEBUG) sendCMD(Constants.CMD_OPENDOOR);
                    CommonUtil.startPushServer(service, app.CABINET_CODE);
                    // CHKL,1 网络正常
                    // CHKL,2 网络断开
                }
            } catch (Exception e) {
                logger.error("心跳失败，等待复活=====" + e);
                e.printStackTrace();
            }
        }
    }

    private static final class BoxQueueHandle extends Handler {
        WeakReference<MonitorService> wrService;

        public BoxQueueHandle(MonitorService service, Looper looper) {
            super(looper);
            this.wrService = new WeakReference<MonitorService>(service);
        }

        @Override
        public void handleMessage(Message msg) {
            Bundle bundle = msg.peekData();
            String cmdType = bundle.getString("cmdType");
            String data = bundle.getString("data");
            MonitorService service = wrService.get();
            if (service != null) {
                service.SerialPortMethods(cmdType, data);
            }
            super.handleMessage(msg);
        }
    }

    private static final class MonitorReceiver extends BroadcastReceiver {
        WeakReference<MonitorService> wrf;

        MonitorReceiver(MonitorService service) {
            wrf = new WeakReference<MonitorService>(service);
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            MonitorService service = wrf.get();
            if (service == null) return;
            String action = intent.getAction();
            logger.info("onReceive " + action);
            if (action.equals(CoreConstants.ACTION_PUSH)) {
                service.monitorHandle.push(intent);
            } else if (action.equals(ACTION_SUBMIT_DATA)) {
                logger.debug("================登录界面上传待提交数据================");
                service.sendUnSubmitInfos(true);
            } else if (action.equals(ACTION_SERIALPORT_SEND_BATCH)) {
                String cmdType = intent.getStringExtra("cmd");
                Object[] preperBox = (Object[]) intent.getSerializableExtra("data");
                service.monitorHandle.batchOpenBox(service, service.handler, preperBox, service.app.getLogin().uid, AnalyticsUtil.OpSource.CABINET_INVENTORY_OPEN);
                logger.info("preperBox " + preperBox.length);
            } else { //固件、模拟格口指令 消息处理
                String cmdType = intent.getStringExtra("cmd");
                String data = intent.getStringExtra("data");
                int priority = intent.getIntExtra("priority", 0);
                if (TextUtils.isEmpty(cmdType)) return;
                if (action.equals(ACTION_CMD_DEBUG)) {
                    service.doCallBack(cmdType + "," + data + " ");
                } else if (action.equals(ACTION_SERIALPORT_SEND)) {
                    if (cmdType.equals(Constants.CMD_OPEN)) { // 放入队列
                        service.addBoxQueue(cmdType, data, priority);
                    } else {
                        service.SerialPortMethods(cmdType, data); // 直接执行
                    }
                }

            }
        }

    }
}
package cn.jlb.pro.intelligentcabinet.app;

import android.app.Activity;
import android.app.Dialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnErrorListener;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.text.TextUtils;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.VideoView;
import android.widget.ViewFlipper;

import com.umeng.analytics.MobclickAgent;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import cn.jlb.pro.core.app.BaseActivity;
import cn.jlb.pro.core.utils.CustomProgress;
import cn.jlb.pro.core.utils.FileUtils;
import cn.jlb.pro.core.utils.ImageLoader;
import cn.jlb.pro.core.utils.JsonUtils;
import cn.jlb.pro.core.utils.NetUtils;
import cn.jlb.pro.core.utils.ToastUtils;
import cn.jlb.pro.intelligentcabinet.R;
import cn.jlb.pro.intelligentcabinet.config.Constants;
import cn.jlb.pro.intelligentcabinet.dao.AdvertDao;
import cn.jlb.pro.intelligentcabinet.entity.AdvertInfo;
import cn.jlb.pro.intelligentcabinet.entity.NoticeInfo;
import cn.jlb.pro.intelligentcabinet.ui.activity.MainActivity;
import cn.jlb.pro.intelligentcabinet.ui.activity.PickupActivity;
import cn.jlb.pro.intelligentcabinet.ui.activity.PickupPayActivity;
import cn.jlb.pro.intelligentcabinet.ui.activity.RechargeMainActivity;
import cn.jlb.pro.intelligentcabinet.ui.manager.ManagerActivity;
import cn.jlb.pro.intelligentcabinet.utils.PreferenceUtil;
import cn.jlb.pro.intelligentcabinet.utils.TimeUtils;
import cn.jlb.pro.intelligentcabinet.utils.Util;

/**
 * activity基础类，其他activity继承该类
 *
 * @author wqr
 */
public abstract class SimpleActivity extends BaseActivity {
    private static final int MSG_TIMEOUT = 0x888;
    private static final int MSG_DISPLAY_AD = 0x777;
    private static final int MSG_DISPLAY_NOTICE = 0x666;
    private final Queue<AdvertInfo> adInfos = new LinkedList<AdvertInfo>();
    private final Queue<NoticeInfo.Notice> notice2s = new LinkedList<NoticeInfo.Notice>();
    public int deliveryCount;
    private CmdListener mCmdListener;
    private TimeUtils time;
    private TextView mTvTime;
    private boolean runningTop;
    /**
     * 用于接收固件消息
     */
    private MyReceiver mCmdBroadcastReceiver;
    /**
     * 加载条
     */
    private Dialog boxProgress;
    /**
     * handle
     */
    private SimpleHandler simpleHandler;
    /**
     * BoxApp
     */
    private BoxApp simpleApp;
    /**
     * banner ImageView
     */
    private ImageView bannerIV;
    /**
     * banner VideoView
     */
    private VideoView bannerVV;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        simpleHandler = new SimpleHandler(this);
        initBoxApp();
        initUI();
        initData();
    }

    private void initBoxApp() {
        simpleApp = (BoxApp) getApplication();
    }

    @Override
    protected void onResume() {
        MobclickAgent.onResume(this);
        if (mTvTime != null) {
            enableCountdown(mTvTime);
        }
        runningTop = true;
        super.onResume();
    }

    @Override
    protected void onNewIntent(Intent intent) {
        this.setIntent(intent);
        super.onNewIntent(intent);

        logger.info("onNewIntent========:" + intent);
    }

    @Override
    protected void onStop() {
        if (time != null) {
            time.endTime();
        }
        runningTop = false;
        super.onStop();
    }

    @Override
    protected void onPause() {
        MobclickAgent.onPause(this);
        runningTop = false;
        super.onPause();
    }

    @Override
    protected void onDestroy() {
        if (mCmdBroadcastReceiver != null) {
            unregisterReceiver(mCmdBroadcastReceiver);
        }
        if (time != null) {
            time.endTime();
            time = null;
        }

        if (boxProgress != null) {
            boxProgress.dismiss();
            boxProgress = null;
        }

        super.onDestroy();
    }

    @Override
    public boolean dispatchTouchEvent(MotionEvent ev) {
        restartTimeCount();
        return super.dispatchTouchEvent(ev);
    }

    public void restartTimeCount() {
        if (time != null) {
            time.RestartTimeCount();
        }
    }

    /**
     * 超时检查，显示 progressdialog
     *
     * @param time 超时时间
     */
    public void checkTimeout(long time) {
        logger.info("checkTimeout " + time + ",runningTop " + runningTop);
        if (!runningTop) {
            return;
        }
        if (boxProgress == null) {
            boxProgress = new CustomProgress(this);
        }

        if (simpleHandler != null) {
            boxProgress.show();
            Message message = new Message();
            message.what = MSG_TIMEOUT;
            simpleHandler.sendMessageDelayed(message, time);
        }
    }

    /**
     * 隐藏progressdialog
     */
    public void hideProgress() {
        if (boxProgress != null) {
            boxProgress.dismiss();
            simpleHandler.removeMessages(MSG_TIMEOUT);
        }
    }

    /**
     * 设置固件接收对象
     *
     * @param listener 消息接收对象
     */
    public void setCmdListener(CmdListener listener) {
        if (listener != null) {
            registerReceiver();
            this.mCmdListener = listener;
        }
    }

    /**
     * 开启倒计时
     *
     * @param tvTime 时间控件
     */
    private void enableCountdown(TextView tvTime) {
        if (Constants.DEBUG) return;
        this.mTvTime = tvTime;
        if (time != null) {
            time.endTime();
        }
        time = new TimeUtils(this, mTvTime, Constants.WHAT_TIME_SET_DELAY,
                Constants.WHAT_TIME_SET_SHOW);
        time.startTime();
    }

    private void displayAdmin() {
        View view = findViewById(R.id.activity_menu_admin);
        if (view != null) {
            view.setVisibility(View.VISIBLE);
            view.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    goActivity(ManagerActivity.class);
                }
            });
        }
    }

    /**
     * 注册广播
     */
    private void registerReceiver() {
        mCmdBroadcastReceiver = new MyReceiver(this);
        IntentFilter myIntentFilter = new IntentFilter();
        myIntentFilter.addAction(MonitorService.ACTION_SERIALPORT_HANDLE);
        myIntentFilter.addAction(MonitorService.ACTION_DATA_REFRESH);
        registerReceiver(mCmdBroadcastReceiver, myIntentFilter);
    }

    private ToastUtils mToastUtils;

    private void initToast() {
        if (mToastUtils == null) {
            mToastUtils = new ToastUtils(this);
        }
    }

    /**
     * 显示错误信息和错误码
     *
     * @param msg  消息
     * @param code 错误码
     */
    protected void displayErrorCode(String msg, int code) {
        initToast();
        mToastUtils.toast(msg + " code=" + code, Toast.LENGTH_LONG);
    }

    /**
     * 显示提示信息
     *
     * @param msg 消息内容
     */
    protected void displayErrorMsg(String msg) {
        initToast();
        mToastUtils.toast(msg, Toast.LENGTH_LONG);
    }

    /**
     * 初始化UI
     */
    public abstract void initUI();

    /**
     * 初始化数据
     */
    public abstract void initData();

    /**
     * 初始化标题栏
     */
    public final void initHeader() {
        simpleHandler.removeMessages(MSG_DISPLAY_NOTICE);
        List<NoticeInfo.Notice> notices = getNotice();
        if (notices != null) {
            if (notices.size() > 1) {
                notice2s.clear();
                for (NoticeInfo.Notice notice : notices) {
                    notice2s.offer(notice);
                }
                simpleHandler.sendEmptyMessage(MSG_DISPLAY_NOTICE);
            } else {
                NoticeInfo.Notice notice = notices.get(0);
                displayHeader(notice);
            }
        }
    }

    private void displayHeader(NoticeInfo.Notice notice) {
//		setHeaderIcon(notice.icon);
        setHeaderTitle(notice.title);
        setHeaderNotice(notice.content);
    }

    /**
     * 获取通知列表
     */
    private List<NoticeInfo.Notice> getNotice() {
        List<NoticeInfo.Notice> noticeList = null;
        String noticeData = PreferenceUtil.getString(this, Constants.KEY_NOTICE_CONTENT);// 从缓存中读出通知
        if (!TextUtils.isEmpty(noticeData)) {
            NoticeInfo notice2 = JsonUtils.fromJson(noticeData, NoticeInfo.class);
            if (notice2 != null) {
                noticeList = notice2.list;
                if (noticeList != null && !noticeList.isEmpty()) {
                    logger.debug("noticeList " + noticeList);
                }
            }
        }
        return noticeList;
    }

    /**
     * 初始化菜单栏
     *
     * @param title 标题
     */
    public final void initMenu(String title) {
        setMenuTitle(title);
        enableCountdown(getMenuTime());
    }

    /**
     * 初始化菜单栏
     *
     * @param title 标题
     * @param admin 是否管理员
     */
    public final void initMenu(String title, boolean admin) {
        setMenuTitle(title);
        enableCountdown(getMenuTime());
        if (admin) displayAdmin();
    }

    /**
     * 显示版权
     */
    public final void initCopyright() {
        String copyright1 = Constants.COPYRIGHT;
        String phone1 = Constants.PHONE;
        TextView tvCopyright = (TextView) findViewById(R.id.activity_bottom_copyright);
        if (null != tvCopyright) {
            tvCopyright.setText(copyright1);
        }
        TextView tvPhone = (TextView) findViewById(R.id.activity_bottom_phone);
        if (null != tvPhone) {
            tvPhone.setText(phone1);
        }
    }

    /**
     * 自定义通知图标
     *
     * @param iconPath 图片路径
     */
    private void setHeaderIcon(String iconPath) {
        ImageView ivBitmap = (ImageView) findViewById(R.id.activity_header_icon);
        if (null != ivBitmap && !TextUtils.isEmpty(iconPath)) {
            ImageLoader.display(getApplicationContext(), iconPath, ivBitmap);
        }
    }

    /**
     * 自定义通知内容
     *
     * @param notice 通知内容
     */
    private void setHeaderNotice(String notice) {
        TextView tvNotice = (TextView) findViewById(R.id.activity_header_notice);
        if (null != tvNotice) {
            tvNotice.setText(notice);
        }
    }

    /**
     * 设置header 动画
     */
    private void setHeaderAnimation() {
        ViewFlipper vf = (ViewFlipper) findViewById(R.id.activity_header_vf);
        if (vf != null) {
            vf.setInAnimation(AnimationUtils.loadAnimation(this, R.anim.push_up_in));
            vf.setOutAnimation(AnimationUtils.loadAnimation(this, R.anim.push_up_out));
            vf.startFlipping();
            vf.stopFlipping();
        }
    }

    /**
     * 自定义通知内容
     *
     * @param title 通知标题
     */
    private void setHeaderTitle(String title) {
        TextView tvTitle = (TextView) findViewById(R.id.activity_header_title);
        if (null != tvTitle) {
            tvTitle.setText(title);
        }
    }

    /**
     * 自定义菜单标题
     *
     * @param title 标题
     */
    private void setMenuTitle(String title) {
        TextView tvTitle = (TextView) findViewById(R.id.activity_menu_title);
        if (null != tvTitle) {
            tvTitle.setText(title);
        }
    }

    public String getMenuTitle() {
        TextView tvTitle = (TextView) findViewById(R.id.activity_menu_title);
        if (null != tvTitle) {
            return tvTitle.getText().toString();
        }
        return null;
    }

    /**
     * 获取时间控件
     */
    private TextView getMenuTime() {
        return (TextView) findViewById(R.id.activity_menu_time);
    }

    /**
     * 显示顶部图片
     *
     * @param ads 图片信息
     */
    private void displayBannerTop(List<AdvertInfo> ads) {
        ImageView home_banner_top0 = (ImageView) findViewById(R.id.home_banner_top1);
        if (home_banner_top0 == null) {
            return;
        }
        ImageView home_banner_top1 = (ImageView) findViewById(R.id.home_banner_top2);
        ImageView home_banner_top2 = (ImageView) findViewById(R.id.home_banner_top3);
        ImageView ivs[] = new ImageView[]{home_banner_top0, home_banner_top1, home_banner_top2};
        List<ImageView> list = new ArrayList<ImageView>();
        list.add(home_banner_top0);
        list.add(home_banner_top1);
        list.add(home_banner_top2);

        if (ads != null && !ads.isEmpty()) {
            for (int i = 0; i < ads.size(); i++) {
                AdvertInfo info = ads.get(i);
                ImageLoader.display(this, info.resource_url, ivs[i]);
                list.remove(ivs[i]);
                if (i >= 2)
                    break;
            }

            for (ImageView p : list) {
                p.setVisibility(View.INVISIBLE);
            }
        } else {
            for (ImageView iv : ivs) {
                iv.setVisibility(View.INVISIBLE);
            }
        }
    }

    /**
     * 自定义banner图片
     *
     * @param areaId 区域编号
     */
    public final void displayBanner(int areaId) {
        simpleHandler.removeMessages(MSG_DISPLAY_AD);
        if (null == bannerVV) {
            bannerVV = (VideoView) findViewById(R.id.activity_banner_video);
        }
        if (null == bannerIV) {
            bannerIV = (ImageView) findViewById(R.id.activity_banner_image);
        }

        AdvertDao advertDao = new AdvertDao(this);
        List<AdvertInfo> ads = advertDao.findAdvertByAreaId(areaId);
        if (ads != null && !ads.isEmpty() && simpleHandler != null) {
            adInfos.clear();
            for (AdvertInfo a : ads) {
                if (a.type == AdvertInfo.TYPE_TEXT
                        || (a.type == AdvertInfo.TYPE_VIDEO && !(areaId == AdvertInfo.AREA_ID_HOME))) {
                    continue;
                }
                adInfos.offer(a);
            }
            simpleHandler.sendEmptyMessage(MSG_DISPLAY_AD);
        }
    }

    /**
     * 自定义banner视频
     *
     * @param adItem 广告信息
     */
    private void displayVideo(AdvertInfo adItem) {
        simpleHandler.removeMessages(MSG_DISPLAY_AD);
        try {
            if (null != bannerVV && FileUtils.exists(adItem.forward_url)
                    && adItem.status == AdvertInfo.STATUS_FINISH) {
                bannerVV.setVisibility(View.VISIBLE);
                bannerVV.setVideoURI(Uri.parse(adItem.forward_url));
                bannerVV.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                    @Override
                    public void onCompletion(MediaPlayer mediaPlayer) {
                        simpleHandler.sendEmptyMessage(MSG_DISPLAY_AD);
                    }
                });
                bannerVV.setOnErrorListener(new OnErrorListener() {

                    @Override
                    public boolean onError(MediaPlayer mp, int what, int extra) {
                        logger.error("displayVideo error" + what);
                        simpleHandler.sendEmptyMessage(MSG_DISPLAY_AD);
                        displayBannerImageView();
                        return true;
                    }
                });
                bannerVV.start();
                hideBannerImagView();
            } else {
                simpleHandler.sendEmptyMessage(MSG_DISPLAY_AD);
            }
        } catch (Exception e) {
            logger.error("displayVideo " + e);
        }
    }

    private void hideBannerImagView() {
        if (null != bannerIV) {
            bannerIV.setVisibility(View.GONE);
        }
    }

    /**
     * 业务跳转
     *
     * @param index    业务编号
     * @param activity context
     */
    public void returnLastAction(int index, Activity activity) {
        logger.debug("index " + Util.getIndexName(index));
        switch (index) {
            // 取件
            case Constants.INDEX_DEPOSIT:
            case Constants.INDEX_RECHARGE:
                RechargeMainActivity.startAct(this);
                break;
            case Constants.INDEX_PICKUP:
                if (needPay(simpleApp)) {
                    PickupActivity.startAct(this, simpleApp.getChargeInfo().orderId, false);
                } else {
                    PickupPayActivity.startAct(activity);
                }
                break;
            default:
                finish();
                break;
        }
    }

    /**
     * 判断是否需要付费开箱
     */
    public boolean needPay(BoxApp app) {
        Util.updateReallyBalance(this, app);
        return !NetUtils.isConnected(app)
                || app.getLogin().balance >= app.getChargeInfo().settle_amount;
    }

    /**
     * 向固件发送消息
     *
     * @param cmd  消息指令
     * @param data 消息数据
     */
    public final void sendCMD(String cmd, String data) {
        if (!Constants.DEBUG) {
            Intent intent = new Intent(MonitorService.ACTION_SERIALPORT_SEND);
            intent.putExtra("cmd", cmd);
            intent.putExtra("data", data);
            sendBroadcast(intent);
            logger.info("向固件发送消息 " + cmd + " ,data " + data);
        }
    }

    /**
     * 向固件发送消息
     *
     * @param cmd  消息指令
     * @param data 消息数据
     */
    public final void sendUI(String cmd, String data) {
        if (Constants.DEBUG) {
            Intent intent = new Intent(MonitorService.ACTION_SERIALPORT_HANDLE);
            intent.putExtra("cmd", cmd);
            intent.putExtra("data", data);
            sendBroadcast(intent);
        }
    }

    private void displayBannerImageView() {
        if (null != bannerIV) {
            bannerIV.setVisibility(View.VISIBLE);
        }
    }

    private void hideBannerVideoView() {
        if (bannerVV != null) {
            bannerVV.setVisibility(View.GONE);
        }
    }

    private void receiveIntent(Intent intent) {
        if (runningTop) {
            String cmd = intent.getStringExtra("cmd");
            String action = intent.getAction();
            if (mCmdListener != null) {
                if (action.equals(MonitorService.ACTION_SERIALPORT_HANDLE)
                        && !TextUtils.isEmpty(cmd)) {
                    if (simpleHandler != null) {
                        simpleHandler.removeMessages(MSG_TIMEOUT);
                    }
                    if (cmd.equals(Constants.ADMN_LOGIN) && this instanceof MainActivity) {
                        goActivity(ManagerActivity.class);
                    } else {
                        mCmdListener.handle(cmd);
                    }
                } else if (action.equals(MonitorService.ACTION_DATA_REFRESH)) {
                    int data = intent.getIntExtra("data", 0);
                    if (data > 0) {
//                        initHeader();
                        mCmdListener.dataReresh(data);
                    }
                }
            }
            logger.debug("cmd " + cmd);
        }
        logger.debug("runningTop " + runningTop);
    }

    protected final void goActivity(Class<? extends Activity> clazz) {
        Intent intent = new Intent(this, clazz);
        startActivity(intent);
        finish();
    }

    /**
     * 检查网络并提醒用户
     *
     * @param clazz   Activity
     * @param needNet 是否需要网络
     */
    protected void goActivity(Class<? extends Activity> clazz, boolean needNet) {
        if (needNet && NetUtils.isConnected(this)) {
            goActivity(clazz);
        } else {
            displayErrorMsg("当前网络连接不可用，请等待网络可用后操作，谢谢合作！");
        }
    }

    /**
     * 检查网络并提醒用户
     *
     * @param intent  Intent
     * @param needNet 是否需要网络
     */
    protected final void goActivity(Intent intent, boolean needNet) {
        if (needNet && NetUtils.isConnected(this)) {
            startActivity(intent);
        } else {
            displayErrorMsg("当前网络连接不可用，请等待网络可用后操作，谢谢合作！");
        }
    }

    private void handleMessage(Message msg) {
        if (!runningTop) {
            return;
        }

        switch (msg.what) {
            case MSG_TIMEOUT:
                if (boxProgress != null) {
                    boxProgress.dismiss();
                }
                break;
            case MSG_DISPLAY_AD:
                AdvertInfo adItem = adInfos.poll();
                if (adItem != null) {
                    if (adItem.type == AdvertInfo.TYPE_IMAGE && bannerIV != null) {
                        hideBannerVideoView();
                        ImageLoader.display(getApplicationContext(), adItem.resource_url, bannerIV);
                        simpleHandler.sendEmptyMessageDelayed(MSG_DISPLAY_AD,
                                adItem.play_interval * 1000);
                    } else if (adItem.type == AdvertInfo.TYPE_VIDEO && bannerVV != null) {
                        if (!Constants.DEBUG) {
                            displayVideo(adItem);
                        }
                    }
                    displayBannerTop(adItem.sub_list);
                    adInfos.offer(adItem);
                }
                break;
            case MSG_DISPLAY_NOTICE:
                NoticeInfo.Notice notice = notice2s.poll();
                if (notice != null) {
                    displayHeader(notice);
                    setHeaderAnimation();
//                    logger.debug( "notice times " + notice.play_interval);
                    simpleHandler.sendEmptyMessageDelayed(MSG_DISPLAY_NOTICE,
                            notice.play_interval * 1000);
                    notice2s.offer(notice);
                }
                break;
            default:
                break;
        }
    }


    /**
     * 固件消息处理接口
     */
    public interface CmdListener {

        /**
         * 处理底层消息
         *
         * @param cmd 消息内容
         */
        void handle(String cmd);

        /**
         * 刷新数据
         *
         * @param type 1广告、2通知
         */
        void dataReresh(int type);
    }

    private static final class SimpleHandler extends Handler {
        WeakReference<SimpleActivity> wrActivity;

        /**
         * Default constructor associates this handler with the {@link Looper}
         * for the current thread.
         * <p/>
         * If this thread does not have a looper, this handler won't be able to
         * receive messages so an exception is thrown.
         */
        public SimpleHandler(SimpleActivity activity) {
            this.wrActivity = new WeakReference<SimpleActivity>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            SimpleActivity theActivity = wrActivity.get();
            if (theActivity != null) {
                theActivity.handleMessage(msg);
            }
            super.handleMessage(msg);
        }
    }

    /**
     * 固件消息接收对象
     */
    private static final class MyReceiver extends BroadcastReceiver {
        WeakReference<SimpleActivity> wrf;

        MyReceiver(SimpleActivity activity) {
            wrf = new WeakReference<SimpleActivity>(activity);
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            SimpleActivity activity = wrf.get();
            if (activity != null) {
                activity.receiveIntent(intent);
            }
        }
    }
}
/*
 * Copyright (c) 2014-2015 Zhong Ke Fu Chuang (Beijing) Technology Co., Ltd.  All Rights Reserved.
 *
 */

package cn.jlb.pro.intelligentcabinet.config;

import android.content.Context;
import android.text.TextUtils;

import cn.jlb.pro.core.utils.SharePreferenceUtil;
import cn.jlb.pro.intelligentcabinet.app.BoxApp;
import cn.jlb.pro.intelligentcabinet.utils.PreferenceUtil;

/**
 * 柜体配置
 * @author wqr
 * @version V1.0
 * @date 2015年6月8日 下午6:08:20
 */
public class CabinetConfigUtils {

    private static final String KEY_CABINET_CODE = "cabinet";
    private static final String KEY_TOTAL_BOX = "boxTotal";
    private static final String KEY_LAYOUT = "key_layout";
    private static final String KEY_PROTOCOL_VERSION = "key_protocol_version";
    private static final String KEY_PROTOCOL_CONTENT = "key_protocol_content";
    private static final String KEY_QRCODE_URL = "key_qrcode_url";
    private static final String KEY_OPERATION_MODE = "key_operation_mode";
    private static final String KEY_SVR_PHAROS = "key_svr_pharos";
    private static final String KEY_TIME_COUNTS = "key_time_counts";
    private static final String KEY_BOX_ASSIGNED_MODE = "key_box_assigned_mode";
    /**
     * 更换IP和柜体编号时需要重新连接
     */
    private static final String KEY_MQTT_RECONNECT = "key_mqtt_reconnect";

    private static final String KEY_FIRE_VERSION = "fire_version";
    /**
     * 是否进行过升级
     */
    private static final String KEY_UPGRADE = "key_upgrade";

    private static final String KEY_COPYRIGHT = "key_copyright";

    /**
     * 共享
     * @param context
     */
    public static String getCabinetCode(Context context) {
        return SharePreferenceUtil.getString(context, KEY_CABINET_CODE);
    }

    public static void setCabinetCode(Context context, String cabinetCode) {
        BoxApp.getApp().CABINET_CODE = cabinetCode;
        SharePreferenceUtil.putString(context, KEY_CABINET_CODE, cabinetCode);
    }

    public static int getTotalBox(Context context) {
        return PreferenceUtil.getInt(context, KEY_TOTAL_BOX);
    }

    public static void setTotalBox(Context context, int totalBox) {
        Constants.CABINET_BOX_TOTAL = totalBox ;
        PreferenceUtil.putInt(context, KEY_TOTAL_BOX, totalBox);
    }

    public static String getLayout(Context context) {
        return PreferenceUtil.getString(context, KEY_LAYOUT);
    }

    public static void setLayout(Context context, String layout) {
        PreferenceUtil.putString(context, KEY_LAYOUT, layout);
    }

    public static String getProtocol_version(Context context) {
        return PreferenceUtil.getString(context, KEY_PROTOCOL_VERSION);
    }

    public static void setProtocol_version(Context context, String protocol_version) {
        PreferenceUtil.putString(context, KEY_PROTOCOL_VERSION, protocol_version);
    }

    public static String getProtocol_content(Context context) {
        return PreferenceUtil.getString(context, KEY_PROTOCOL_CONTENT);
    }

    public static void setProtocol_content(Context context, String protocol_content) {
        PreferenceUtil.putString(context, KEY_PROTOCOL_CONTENT, protocol_content);
    }

    public static String getCopyright(Context context) {
        return PreferenceUtil.getString(context, KEY_COPYRIGHT);
    }

    public static void setCopyright(Context context, String copyright) {
        PreferenceUtil.putString(context, KEY_PROTOCOL_CONTENT, copyright);
    }

    public static String getQcodeUrl(Context context) {
        return PreferenceUtil.getString(context, KEY_QRCODE_URL);
    }

    public static void setQcodeUrl(Context context, String qcodeUrl) {
        PreferenceUtil.putString(context, KEY_QRCODE_URL, qcodeUrl);
    }

    public static int getTimeCounts(Context context) {
        return PreferenceUtil.getInt(context, KEY_TIME_COUNTS);
    }

    public static void setTimeCounts(Context context, int timecounts) {
        Constants.WHAT_TIME_SET_DELAY = timecounts ;
        PreferenceUtil.putInt(context, KEY_TIME_COUNTS, timecounts);
    }

    public static int getFire_version(Context context) {
        return PreferenceUtil.getInt(context, KEY_FIRE_VERSION);
    }

    public static void setFire_version(Context context, int fire_version) {
        PreferenceUtil.putInt(context, KEY_FIRE_VERSION, fire_version);
    }

    /**
     * 共享
     * @param context
     * @return
     */
    public static String getSvrPharos(Context context) {
        return SharePreferenceUtil.getString(context,KEY_SVR_PHAROS);
    }

    public static void setSvrPharos(Context context,String svrPharos) {
        SharePreferenceUtil.putString(context, KEY_SVR_PHAROS, svrPharos);
    }

    /**
     * 共享
     * @param context
     * @return
     */
    public static boolean getMqttreconnect(Context context) {
        return SharePreferenceUtil.getBoolean(context, KEY_MQTT_RECONNECT, false);
    }

    /**
     *
     * @param context
     * @param flag 需要重连（true）
     */
    public static void setMqttreconnect(Context context,boolean flag) {
        SharePreferenceUtil.putBoolean(context, KEY_MQTT_RECONNECT, flag);
    }

    /**
     * 设置升级标识
     *
     * @param upgrade 是否刚进行过升级
     * @return void
     * @throws
     */
    public static void setUpgradeFlag(Context context, boolean upgrade) {
        PreferenceUtil.putBoolean(context, KEY_UPGRADE, upgrade);
    }

    /**
     *
     * @param context
     * @return upgrade 是否刚进行过升级，在程序第一次启动时调用
     */
    public static boolean getUpgradeFlag(Context context) {
        return PreferenceUtil.getBoolean(context, KEY_UPGRADE, false);
    }

    /**
     *
     * @param context  0保存中，1调试中，2运营中，3已删除
     * @return 运营模式(true)，调试模式(false)
     */
    public static String getOperationMode(Context context) {
        return  PreferenceUtil.getString(context, KEY_OPERATION_MODE);
    }

    /**
     * 设置是否运营模式
     * @param context
     * @param status 0保存中，1调试中，2运营中，3已删除
     */
    public static void setOperationMode(Context context,String status) {
        PreferenceUtil.putString(context, KEY_OPERATION_MODE, status);
    }
    /**
     *
     * @param context
     * @return 运营模式(true)，调试模式(false)
     */
    public static boolean getBoxAssignedMode(Context context) {
        return PreferenceUtil.getBoolean(context, KEY_BOX_ASSIGNED_MODE, false);
    }

    /**
     * 设置格口分配模式
     * @param context
     * @param boxAssignedMode 柜体分配(true)，服务器分配模式(false)
     */
    public static void setBoxAssignedMode(Context context,boolean boxAssignedMode) {
        PreferenceUtil.putBoolean(context, KEY_BOX_ASSIGNED_MODE, boxAssignedMode);
    }

    //
    // public boolean isScreenKeepOn() {
    // return screenKeepOn;
    // }
    //
    // public void setScreenKeepOn(boolean screenKeepOn) {
    // this.screenKeepOn = screenKeepOn;
    // }

    // public int getMaxStreams() {
    // return maxStreams;
    // }
    //
    // public void setMaxStreams(int maxStreams) {
    // this.maxStreams = maxStreams;
    // }

}
package cn.jlb.pro.intelligentcabinet.config;

import java.text.SimpleDateFormat;

import cn.jlb.pro.intelligentcabinet.BuildConfig;

/*
 * 常量声明
 */
public class Constants {

	// 模拟器模式（true），真机模式（false）
	public static final boolean DEBUG = BuildConfig.IS_RUN_ON_EMULATOR;
	public static String CABINET_DEFAULT = "0000";
	public final static int INDEX_MEDIA = 0; // 广告播放
	// public static String CABINET_CODE = "";// 自提柜编号1311100001
	public final static int INDEX_PICKUP = 1;// 我要取件
	public final static int INDEX_DELIVERY = 2;// 我要投递
	public final static int INDEX_DEPOSIT = 3;// 我要寄存
	public final static int INDEX_RECHARGE = 4;// 我要充值
	public final static int INDEX_INQUIRY = 5;// 我要查询
	public final static int INDEX_HELP = 6;// 用户须知
	public final static int INDEX_MANAGER = 99; // 后台管理
	public final static int INDEX_DELIVERY_LIST = 7;// 投递列表页面
	public final static int INDEX_DELIVERY_MAIN = 8;// 投递主页面
	public final static int INDEX_DELIVERY_BOX_TYPE = 9;// 投递：选择格口类型页面
	public final static int INDEX_DELIVERY_BOX_POSITION = 10;// 投递：格口位置页面
	public final static int INDEX_MAIN = 11;// 投递主页面

	/**
	 * 投递
	 */
	public final static int REFER_DELIVER = 1;
	/**
	 * 寄存
	 */
	public final static int REFER_DEPOSIT = 2;
	/**
	 * 格口状态
	 */
	public final static int CELL_STATUS_IDLE = 11101;// 空闲
	public final static int CELL_STATUS_BOOK = 11104;// 预定
	/**
	 * 格口类型
	 */
	public final static int CELL_TYPE_BIG = 10901;// 大

	// 登录来源
	public final static int CELL_TYPE_MIDDLE = 10902;// 中
	public final static int CELL_TYPE_SMALL = 10903;// 小
	// public final static int REFER_ADMIN = 3; // 管理员
	public final static int CELL_TYPE_ULTRA_SMALL = 10904;// 超小
	/**
	 * 接口定义 服务器通信命令字
	 */
	public final static short CMD_TEST = 0;// 交互测试命令（兼心跳测试包）
	public final static short CMD_REGISTER = 1;// 请求当前用户注册
	public final static short CMD_VERIFY = 2;// 返回验证码
	public final static short CMD_LOGIN = 3;// 快递员、寄存人员登录接口
	public final static short CMD_LOGIN_CARD = 4;// 一卡通登录接口
	public final static short CMD_DELIVERY = 5;// 快递员投递接口
	public final static short CMD_HIRE_CANCLE = 6;// 快递员取消预定接口
	// public final static short CMD_TEST=7;//物业签到通知
	// public final static short CMD_TEST=8;//收件人密码错误通知接口（已取消）
	public final static short CMD_PICKUP_OK = 9;// 收件人取件成功通知接口
	public final static short CMD_WARNING = 10;// 自提柜告警接口
	public final static short CMD_BIND_UNBIND_CARD = 11;// 绑定或解绑一卡通接口
	public final static short CMD_HIRE_BOX = 12;// 输入收件人手机号判断是否租用格口
	public final static short CMD_DELIVERY_SELECT_BOX = 13;// 选择大中小箱时判断可用余额
	public final static short CMD_DEPOSIT_SELECT_BOX = 14;// 寄存选择大中小箱时判断可用余额
	// public final static short CMD_TEST=15;//满意度评价接口
	public final static short CMD_GET_DELIVERYLIST = 16;// 获取历史投递表
	public final static short CMD_DEPOSIT_SUBMIT = 17;// 寄存完成提 接口
	public final static short CMD_RECHARGE = 18;// 充值接口
	public final static short CMD_WEATHER = 19;// 天气 及时间更新 及时间更新 及时间更新
	public final static short CMD_PICKUP_COST = 20;// 取件费用判断
	public final static short CMD_INQUIRY_LIST = 21;// 查询列表信息
	public final static short CMD_CHANGE_PHONE = 22;// 快递员、寄存人投递成功后修改收件人手机号
	public final static short CMD_TIME = 23;// 时间同步接口
	public final static short CMD_REPICKUP = 24;// 快递员取回快件
	public final static short CMD_PICKUP_SUBMIT = 25;// 将快件箱所有操作上传
	public final static short CMD_RE_REGISTER = 26;// 测试用反注册接口
	public final static short CMD_UPLOAD = 27;// 上传取件数据
	public final static short CMD_RECOVERY = 28;// 还原取件数据
	public final static short CMD_IMG_UPLOAD = 29;// 图片上传
	public final static short CMD_PICKUP_DATA = 30;// 取件箱体图信息
	public final static short CMD_UPDATE_DATA = 31;// 升级信息
	public final static short CMD_SUBMIT_DELIVERY = 8;// 一次性投递
	public final static short CMD_SUBMIT_DEPOSIT = 33;// 一次性寄存
	public final static short CMD_TARIFF_CONFIG = 34;// 格口数据
	public final static short CMD_PUSH_OPEN = 1000;// 远程开箱，打开格口
	public final static short CMD_DATABUS_FTP4OPLOG = 35;// 获取FTP信息
	public final static short CMD_ICARD_ISBIND = 36;// 判断卡是否绑定
	public final static short CMD_NOTICE_NOTICE_LIST = 37;// 公告
	public final static short CMD_APP_UPDATE_FLAG = 38;// 获取FTP信息
	public final static short APP_UPDATE_INIT = 39;// 获取柜体初始化信息
	public final static short CMD_ADVERT_GETLIST = 40;// 获取首页广告图片
	public final static short CMD_FORECHARGE = 41;// 获取首页广告图片
	/**
	 * 倒计时显示时间
	 */
	public static final int WHAT_TIME_SET_SHOW = 20000;
	/**
	 * 服务线程休眠时间时隔
	 */
	public static final int SERVICE_THREAD_TIME = 15000;
	// 日志引擎 日期格式化的格式
	public static final SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");
	public static final SimpleDateFormat SDF3 = new SimpleDateFormat("HH:mm:ss");
	public static final SimpleDateFormat SDFSHOW = new SimpleDateFormat("MM-dd HH:mm");
	public static final SimpleDateFormat SDFBASE = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	public static final SimpleDateFormat SDFBASE2 = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
	// 调用串口服务命令
	public final static String CMD_OPEN = "OPEN";// 打开 "OPEN,"+格口号+空格
	public final static String CMD_TOTAL = "STBN";// 格口总数 "STBN,"+格口总数+空格
	public final static String CMD_STUDY = "SAPA";// 学习开始 "SAPA,"+格口号+空格
	public final static String CMD_STOP = "SPPA";// 学习结束 "SPPA"
	public final static String CMD_RESETTOTAL = "DEFT";// 恢复设备默认值 "DEFT"
	public final static String CMD_SAVESYS = "STDF";// 保存学习信息 "STDF"
	public final static String CMD_OPENDOOR = "CHKL";// 开屏 心跳 "CHKL"
	public final static String CMD_BREAKCONN = "BKLK";// 断开连接 主动退出应用 "BKLK"
	public final static String CMD_VERSION = "GTVS";// 控制板返回版本信息 "GTVS"
	public final static String CMD_UPDATESYS = "UPFW";// 固件升级
	public final static String CMD_CHKL = "CHKL";// 检查网络是否正常
	// 串口服务返回调用
	public final static String RECMD_OPEN = "OPEN";// 打开格口返回
	public final static String RECMD_RFID = "RFID";// 刷卡
	public final static String RECMD_SCAN = "SCAN";// 扫描条码
	public final static String RECMD_CLOS = "CLOS";// 关闭箱门
	public final static String RECMD_FPMD = "FPMD";// 指纹
	public final static String RECMD_COIN = "COIN";// 投币
	public final static String RECMD_YPAY = "YPAY";// 投币开启
	public final static String RECMD_NPAY = "NPAY";// 投币关闭
	public final static String RECMD_SAPA = "SAPA";// 学习
	public final static String RECMD_COMU = "COMU,OVERL";// 心跳包超时预警
	public final static String ADMN_LOGIN = "ADMN,LOGIN";
	public final static String RECMD_UPDATESYS = "UPFW";// 固件升级返回信息
	public final static String RECMD_RDLG = "RDLG";// 固件升级返回信息
	public final static String RECMD_READNUMBER = "GTVS";// 读取设备唯一标识

	// // 缓存图片存放路径
	// public static final String IMG_DIR = ".res";
	//
	public final static int HANDLER_CALLBACK = 101;// 串口服务返回调用码
	public final static int HANDLER_FTP_CALLBACK = 111;// 串口服务返回调用码
	public final static int HANDLER_FTP_UpBACK = 112;// 上传口服务返回调用码
	public final static int HANDLER_FTP_DOWNLOAD_APK = 113;// 下载apk升级包进度条调用码
	/**
	 * update 安装完成
	 */
	public static final int CMD_UPDATE_INSTALL_FINISH = 300;
	/**
	 * key 初始化请求标识
	 */
	public final static String KEY_INIT_FLAG = "init_flag";
	/**
	 * key 比较柜体的时间和服务器时间差标识
	 */
	public final static String KEY_VERIFY_TIME_FLAG = "verify_time_flag";
	/**
	 * key 获取域名列表标识
	 */
	public final static String KEY_DOMAIN_FLAG = "verify_domain_flag";
	/**
	 * key 计费请求标识
	 */
	public final static String KEY_TARIFF_FLAG = "tariff_flag";

	/**
	 * key 通知请求标识
	 */
	public final static String KEY_NOTICE_FLAG = "notice_flag";
	/**
	 * key 通知请求标识
	 */
	public final static String KEY_CLEAR_FLAG = "clear_flag";
	/**
	 * key 通知内容
	 */
	public final static String KEY_NOTICE_CONTENT = "notice_content";
	/**
	 * key ftp host
	 */
	public final static String KEY_FTP_HOST = "ftp_host";
	/**
	 * key ftp port
	 */
	public final static String KEY_FTP_PORT = "ftp_port";
	/**
	 * key ftp user
	 */
	public final static String KEY_FTP_USER = "ftp_user";
	/**
	 * key ftp pwd
	 */
	public final static String KEY_FTP_PWD = "ftp_pwd";
	/**
	 * key ftp path log
	 */
	public static final String KEY_FTP_PATH_LOG = "ftp_path_log";
	/**
	 * key ftp path upgrade
	 */
	public static final String KEY_FTP_PATH_UPGRADE = "ftp_path_upgrade";
	/**
	 * 日记上传标记
	 */
	public static final String KEY_UPLOADLOG_FLAG = "upload_log";
	/**
	 * 获取广告的标识
	 */
	public static final String KEY_GET_AD_FLAG = "get_ad";
	/**
	 * 充值活动
	 */
	public static final String KEY_FORECHARGE = "forecharge";
	/**
	 * 充值活动的标识
	 */
	public static final String KEY_FORECHARGE_FLAG = "forecharge_flag";
	/**
	 * 微信支付
	 */
	public static final int WEIXIN_PAY = 0;
	/**
	 * 支付宝支付
	 */
	public static final int ALIPAY_PAY = 1;
	/**
	 * 支付宝充值
	 */
	public static final int ALIPAY_RECHARGE = 2;
	/**
	 * 微信充值
	 */
	public static final int WEIXIN_RECHARGE = 3;

	// RFID,222222 刷卡
	// SCAN,*** 扫描条码
	// 关闭箱门 CLOS,OK ,格口数
	// 指纹 FPMD,RETRY FPMD,NOFND FPMD,SAVOK,%d 保存成功 FPMD,OK ,%d 扫描到
	// 投币 COIN,%d
	// 打开返回 OPEN,OK ,%d OPEN,FAILD,%d OPEN,NOTID,%d
	// SAPA,IDERR,%d SAPA,NOTID,%d
	// COMU,OVERL 心跳包超时预警
	public static String CABINET_NUMBER = "000000000000000000";// 固件唯一标识号
	public static int CABINET_BOX_TOTAL = 22;// 格口总数
	/**
	 * 柜体版本号
	 */
	public static int CABINET_VERSION = 1;// 版本号
	/**
	 * update 程序版本号
	 */
	public static int UPDATE_VERSION = 0;// 版本号
	/**
	 * 版权信息
	 */
	public static String COPYRIGHT = "版权所有中科富创(北京)科技有限公司";
	/**
	 * 联系电话
	 */
	public static String PHONE = "4000052708";
	/**
	 * 开箱超时
	 */
	public static int OPENBOXTIMEOUT = 5000;
	/**
	 * cabinet 本地路径
	 */
	// public static String cabinet_apk_path =
	// "/storage/emulated/0/Download/Cabinet-debug.apk" ;
	public static String cabinet_apk_path = "";
	/**
	 * update 本地路径
	 */
	// public static String update_apk_path =
	// "/storage/emulated/0/Download/IntelligentCabinetUpdate-debug.apk" ;
	public static String update_apk_path = "";
	public static String firm_file_path = "";
	public static String CABINET_VERSIONNAME = "2.70.02";// 版本名称
	public static String RESOLUTION = "";
	/**
	 * 取件图类型
	 */
	public static int PIC_TYPE = 100;
	/**
	 * 操作等待计时设置
	 */
	public static int WHAT_TIME_SET_DELAY = 60000;
	// 日志引擎 tag
	public static String LogTag = "[Cabinet]";
	public static int LOG_INFO = 0;
	public static int LOG_DEBUG = 1;
	public static int LOG_WARNING = 2;
	public static int LOG_ERROR = 3;
	public static int LOG_LEVEL = LOG_INFO;
	public static String logpath = "/jlb/Log/";
	public static String QCODE_PATH = "/jlb/qcode/";
	public static String downloadPath = "/jlb/download/";
	public static String MEDIA_PATH = "/jlb/media/";
	// FTP服务器信息
	public static String FTP_HOST = "";
	public static String FTP_PORT = "";
	public static String FTP_USER = "";
	public static String FTP_PWD = "";
	/**
	 * FTP 日记存放路径
	 */
	public static String FTP_PATH_LOG = "";
	/**
	 * FTP 升级文件路径
	 */
	public static String FTP_PATH_UPGRADE = "";

}
package cn.jlb.pro.intelligentcabinet.dao;

import android.content.Context;

import com.j256.ormlite.dao.Dao;

import java.sql.SQLException;

import cn.jlb.pro.core.db.dao.BaseDao;
import cn.jlb.pro.core.db.model.Cell;
import cn.jlb.pro.intelligentcabinet.utils.LogUtil;

/**
 * 价格配置dao
 *
 * @author luoch
 * @date 2015-1-8 下午4:01:49
 */
public class CellsDao extends BaseDao<Cell, Integer> {

    /**
     * @param context
     */
    public CellsDao(Context context) {
        super(context);
    }

    /*
     * (non-Javadoc)
     *
     * @see cn.jlb.pro.intelligentcabinet.db.dao.BaseDao#getDao()
     */
    @SuppressWarnings("unchecked")
    @Override
    public Dao<Cell, Integer> getDao() throws SQLException {

        return mDatabaseHelper.getDao(Cell.class);
    }

    public int deleteAll() {
        try {
            Dao<Cell, Integer> dao = getDao();
            return dao.deleteBuilder().delete();
        } catch (SQLException e) {
            LogUtil.error(TAG, "deleteAll " + e);
            e.printStackTrace();
            return 0;
        }
    }

}
package cn.jlb.pro.intelligentcabinet.dao;

import android.content.Context;
import android.text.TextUtils;

import com.j256.ormlite.dao.Dao;
import com.j256.ormlite.dao.GenericRawResults;
import com.j256.ormlite.dao.RawRowMapper;
import com.j256.ormlite.stmt.DeleteBuilder;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.UpdateBuilder;
import com.j256.ormlite.table.TableUtils;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import cn.jlb.pro.core.db.dao.BaseDao;
import cn.jlb.pro.core.db.model.Pickup;
import cn.jlb.pro.intelligentcabinet.config.Constants;
import cn.jlb.pro.intelligentcabinet.entity.GoodsInfo;
import cn.jlb.pro.intelligentcabinet.entity.GoodsNumber;
import cn.jlb.pro.intelligentcabinet.utils.LogUtil;

/**
 * 投递信息
 *
 * @author luoch
 * @date 2015-1-8 下午4:01:49
 */
public class PickupDao extends BaseDao<Pickup, Integer> {

    private static final String TAG = "PickupDao";

    private static final String QUERY_HEAD = "select order_id,box_id,order_time,end_time,deliveryType,type,loginID,icID,fingerprintID,waybill,phoneNum,pickupPhone,pwd,pickupPay,isSubmit,isValid,delivery_pay,source,push_type,ispickup ,pickup_way,paySide from pickup ";

    private static final String QUERY_HEAD_DESC = "select order_id,box_id,order_time,end_time,deliveryType,type,loginID,icID,fingerprintID,waybill,phoneNum,pickupPhone,pwd,pickupPay,isSubmit,isValid,delivery_pay,source,push_type,isPickup,pickup_way,paySide from pickup order by order_time asc";
    private RawRowMapper<GoodsInfo> rawRowMapper = new RawRowMapper<GoodsInfo>() {

        @Override
        public GoodsInfo mapRow(String[] arg0, String[] arg1) throws SQLException {
            // arg1是查找数据库返回的，复制给bean
            GoodsInfo info = new GoodsInfo();
            try {
                info.order_id = arg1[0];
                info.box_id = arg1[1];
                info.order_time = arg1[2];
                info.end_time = arg1[3];
                try {
                    info.deliveryType = Integer.valueOf(arg1[4]);
                } catch (Exception e) {
                    LogUtil.error(TAG, "mapRow deliveryType " + e);
                }
                info.type = arg1[5];
                info.loginID = arg1[6];
                info.icID = arg1[7];
                info.fingerprintID = arg1[8];
                info.waybill = arg1[9];
                info.phoneNum = arg1[10];
                info.pickupPhone = arg1[11];
                info.pwd = arg1[12];
                try {
                    info.pickupPay = Integer.valueOf(arg1[13]);
                } catch (Exception e) {
                    LogUtil.error(TAG, "mapRow pickupPay " + e);
                }
                try {
                    info.isSubmit = Integer.valueOf(arg1[14]);
                } catch (Exception e) {
                    LogUtil.error(TAG, "mapRow isSubmit " + e);
                }
                try {
                    info.isValid = Integer.valueOf(arg1[15]);
                } catch (Exception e) {
                    LogUtil.error(TAG, "mapRow isValid " + e);
                }
                try {
                    info.deliveryPay = Integer.valueOf(arg1[16]);
                } catch (Exception e) {
                    LogUtil.error(TAG, "mapRow deliveryPay " + e);
                }
                info.source = Integer.valueOf(arg1[17]);
                info.push_type = Integer.valueOf(arg1[18]);
                info.isPickup = Integer.valueOf(arg1[19]);
                info.pickupWay = Integer.valueOf(arg1[20]);
                info.pay_side = Integer.valueOf(arg1[21]);
            } catch (NumberFormatException e) {
                LogUtil.error(TAG, "mapRow " + arg0 + " , " + arg1 + "\r\n" + e);
            }
            return info;
        }

    };
    private String a;
    private RawRowMapper<GoodsNumber> rawRowMapper1 = new RawRowMapper<GoodsNumber>() {

        @Override
        public GoodsNumber mapRow(String[] arg0, String[] arg1) throws SQLException {
            // arg1是查找数据库返回的，复制给bean
            GoodsNumber info = new GoodsNumber();
            try {
                info.loginID = arg1[0];
                info.number = arg1[1];

            } catch (NumberFormatException e) {
                LogUtil.error(TAG, "mapRow " + arg0 + " , " + arg1 + "\r\n" + e);
            }
            return info;
        }
    };
    private RawRowMapper<GoodsInfo> rawRowMapper2 = new RawRowMapper<GoodsInfo>() {

        @Override
        public GoodsInfo mapRow(String[] arg0, String[] arg1) throws SQLException {
            // arg1是查找数据库返回的，复制给bean
            GoodsInfo info = new GoodsInfo();
            try {
                info.loginID = arg1[0];
                info.order_time = arg1[1];
                info.waybill = arg1[2];
                info.phoneNum = arg1[3];
                info.isSubmit = Integer.valueOf(arg1[4]);
                info.box_id = arg1[5];
                info.order_id = arg1[6];

            } catch (NumberFormatException e) {
                LogUtil.error(TAG, "mapRow " + arg0 + " , " + arg1 + "\r\n" + e);
            }
            return info;
        }
    };

    /**
     * @param context
     */
    public PickupDao(Context context) {
        super(context);
    }

    /*
     * (non-Javadoc)
     *
     * @see cn.jlb.pro.intelligentcabinet.db.dao.BaseDao#getDao()
     */
    @SuppressWarnings("unchecked")
    @Override
    public Dao<Pickup, Integer> getDao() throws SQLException {

        return mDatabaseHelper.getDao(Pickup.class);
    }

    /**
     * 上传备份数据库数据 区分来源 柜体操作，推送操作,需要和服务器字段保持一致
     *
     * @return
     */
    public List<GoodsInfo> findALL() {
        List<GoodsInfo> infos = new ArrayList<GoodsInfo>();
        try {
            GenericRawResults<GoodsInfo> results = null;

            Dao<Pickup, Integer> dao = getDao();
            results = dao.queryRaw(QUERY_HEAD_DESC, rawRowMapper);

            if (results != null) {
                for (GoodsInfo info : results) {
                    if (TextUtils.isEmpty(info.phoneNum)) //过滤掉APP投递未确认投递的订单
                        continue;
                    infos.add(info);
                }
            }

            LogUtil.debug(TAG, "findALL " + infos);
        } catch (SQLException e) {
            LogUtil.error(TAG, " findALL error " + e);
            e.printStackTrace();
        }
        return infos;

    }

    /**
     * 查找订单列表
     * 上传备份数据库数据 区分来源 柜体操作，推送操作,需要和服务器字段保持一致
     *
     * @return
     */
    public Set<String> findALLEmploy() {
        Set<String> boxs = new HashSet<String>();
        try {

            Dao<Pickup, Integer> dao = getDao();
            GenericRawResults<GoodsInfo> results = dao.queryRaw(QUERY_HEAD, rawRowMapper);

            if (results != null) {
                for (GoodsInfo info : results) {
                    boxs.add(info.box_id);
                }
            }

        } catch (SQLException e) {
            LogUtil.error(TAG, " findALLEmploy error " + e);
            e.printStackTrace();
        }
        return boxs;

    }

    /**
     * 根据手机号查找是否有未取走物品 区分来源 柜体操作，推送操作
     */
    public List<GoodsInfo> find(String phone, int state) {

        List<GoodsInfo> infos = new ArrayList<GoodsInfo>();
        if (TextUtils.isEmpty(phone)) {
            return infos;
        }
        try {
            GenericRawResults<GoodsInfo> results = null;
            Dao<Pickup, Integer> dao = getDao();

            switch (state) {
                // 待提交 和 未完成的订单
                case 1:
                    results = dao
                            .queryRaw(
                                    QUERY_HEAD
                                            + " where loginID=? and source=0 and isSubmit=? or (isSubmit=? and box_id NOTNULL) and source = 0",
                                    rawRowMapper, phone, GoodsInfo.SUBMIT_STATUS_BEHIND + "",
                                    GoodsInfo.SUBMIT_STATUS_NO + "");
                    break;
                // 投递1 待取回
                case 2:
                    results = dao.queryRaw(QUERY_HEAD
                                    + " where loginID=? and deliveryType=? and isPickup=0 and isSubmit=? and order_id NOTNULL and source = 0 ",
                            rawRowMapper, phone, Constants.REFER_DELIVER + "",
                            GoodsInfo.SUBMIT_STATUS_DONE + "");
                    break;
                // 寄存2 待取回
                case 3:
                    results = dao.queryRaw(QUERY_HEAD
                                    + " where loginID=? and deliveryType=? and isPickup=0 and isSubmit=? and order_id NOTNULL and source = 0 ",
                            rawRowMapper, phone, Constants.REFER_DEPOSIT + "",
                            GoodsInfo.SUBMIT_STATUS_DONE + "");
                    break;
                // 投递1寄存收件人 待取回,未完成订单(已提交)，未完成
                case 4:
                    results = dao.queryRaw(
                            QUERY_HEAD
                                    + " where (loginID=? or phoneNum=?) and source=0 and isPickup=0  and box_id NOTNULL and source = 0 ",
                            rawRowMapper, phone, phone);
                    break;
            }

            if (results != null) {
                for (GoodsInfo info : results) {
                    infos.add(info);
                }
            }

            LogUtil.debug(TAG, " find phone " + phone + " ,state " + state + " \r\n" + infos);
        } catch (SQLException e) {
            LogUtil.error(TAG, " find phone " + phone + " ,state " + state + " \r\n" + e);
            e.printStackTrace();
        }
        return infos;

    }

    /**
     * 向服务器提交未处理信息 已投递未提交 区分来源 柜体操作，推送操作
     *
     * @return
     */
    public List<GoodsInfo> findUnSubmitInfos() {
        List<GoodsInfo> infos = new ArrayList<GoodsInfo>();
        GenericRawResults<GoodsInfo> results = null;

        try {
            Dao<Pickup, Integer> dao = getDao();
            results = dao
                    .queryRaw(
                            QUERY_HEAD
                                    + " where isPickup=1 or isSubmit=1 or (isSubmit=0 AND box_id NOTNULL AND order_time NOTNULL and source=0)",
                            rawRowMapper);
            if (results != null) {
                for (GoodsInfo info : results) {
                    infos.add(info);
                }
                // LogUtil.debug(TAG, "findUnSubmitInfos " + infos);
            }

        } catch (SQLException e) {
            LogUtil.error(TAG, " findUnSubmitInfos " + e);
            e.printStackTrace();
        }
        return infos;
    }

    /**
     * 查找推送且只有格口编号的订单
     *
     * @return
     */
    public List<GoodsInfo> findPushInvalidOrder() {
        List<GoodsInfo> infos = new ArrayList<GoodsInfo>();
        GenericRawResults<GoodsInfo> results = null;

        try {
            Dao<Pickup, Integer> dao = getDao();
            results = dao.queryRaw(QUERY_HEAD
                    + " where order_id  IS NULL and box_id NOTNULL and waybill IS NULL and source=1", rawRowMapper);

            if (results != null) {
                for (GoodsInfo info : results) {
                    infos.add(info);
                }
                // LogUtil.debug(TAG, "findUnSubmitInfos " + infos);
            }

        } catch (SQLException e) {
            LogUtil.error(TAG, " findPushInvalidOrder " + e);
            e.printStackTrace();
        }
        return infos;
    }


    /**
     * 查询指定投递人待投递的订单 区分来源 柜体操作，推送操作
     *
     * @return
     */
    public List<GoodsInfo> findUnSubmitInfosByLoginId(String loginId) {
        if (TextUtils.isEmpty(loginId)) {
            return new ArrayList<GoodsInfo>();
        }
        try {
            Dao<Pickup, Integer> dao = getDao();
            GenericRawResults<GoodsInfo> results = dao.queryRaw(QUERY_HEAD
                            + " where isPickup=0 and source=0 and isSubmit=1 and loginID=?", rawRowMapper,
                    loginId);
            List<GoodsInfo> infos = results.getResults();
            LogUtil.debug(TAG, "findUnSubmitInfosByLoginId " + loginId + " 结果数：" + infos.size());
            return infos;
        } catch (SQLException e) {
            LogUtil.error(TAG, " findUnSubmitInfosByLoginId " + e);
            e.printStackTrace();
            return new ArrayList<GoodsInfo>();
        }
    }

    /**
     * 格口号查询是否有待提交的订单信息
     *
     * @return
     */
    public boolean findIsUsing(String boxID) {
        List<Pickup> pickups = null;
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            QueryBuilder<Pickup, Integer> qb = dao.queryBuilder();
            qb.where().eq(Pickup.BOX_ID_COLUMN, boxID);
//            .and().isNotNull(Pickup.WAY_BILL_COLUMN);
            pickups = qb.query();
            flag = pickups != null && pickups.size() > 0;

            LogUtil.debug(TAG, " findIsUsing boxID " + boxID + ",flag " + flag);
        } catch (SQLException e) {
            LogUtil.error(TAG, " findIsUsing boxID " + boxID + ",flag " + "\r\n" + e);
            e.printStackTrace();
        }

        return flag;
    }

    /**
     * 区分来源 柜体操作，推送操作 查找是否已存在该运单号
     */
    public boolean isExistWaybill(String waybill) {
        List<Pickup> pickups = null;
        boolean flag = false;
        if (TextUtils.isEmpty(waybill)) {
            return flag;
        }
        try {
            Dao<Pickup, Integer> dao = getDao();
            QueryBuilder<Pickup, Integer> qb = dao.queryBuilder();
            qb.where().eq(Pickup.WAY_BILL_COLUMN, waybill);
            pickups = qb.query();
            flag = pickups != null && pickups.size() > 0;

            LogUtil.debug(TAG, " isExistWaybill waybill " + waybill + " ,flag " + flag);
        } catch (SQLException e) {
            LogUtil.error(TAG, " isExistWaybill waybill " + waybill + ",flag " + "\r\n" + e);
            e.printStackTrace();
        }

        return flag;
    }

    /**
     * 区分来源 柜体操作，推送操作 查找是否为未完成订单
     */
    public boolean isUnFinish(String box_id, String isSubmit) {
        List<Pickup> pickups = null;
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            QueryBuilder<Pickup, Integer> qb = dao.queryBuilder();
            qb.where().eq(Pickup.BOX_ID_COLUMN, box_id).and()
                    .eq(Pickup.IS_SUBMIT_COLUMN, isSubmit);
            pickups = qb.query();
            flag = pickups != null && pickups.size() > 0;
            LogUtil.debug(TAG, " isUnFinish box_id " + box_id + ",isSubmit " + isSubmit + ",flag "
                    + flag);
        } catch (SQLException e) {
            LogUtil.error(TAG, " isUnFinish box_id " + box_id + ",isSubmit " + isSubmit + ",flag "
                    + flag + "\r\n" + e);
            e.printStackTrace();
        }

        return flag;
    }

    /**
     * 查询订单号的格口是否未打开 区分来源 柜体操作，推送操作
     *
     * @return
     */
    public boolean findBoxStatus(String waybill) {
        List<Pickup> pickups = null;
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            QueryBuilder<Pickup, Integer> qb = dao.queryBuilder();
            qb.where().eq(Pickup.WAY_BILL_COLUMN, waybill).and()
                    .eq(Pickup.SOURCE_COLUMN, 0).and().isNull(Pickup.BOX_ID_COLUMN);
            pickups = qb.query();
            flag = pickups != null && pickups.size() > 0;

            LogUtil.debug(TAG, " findBoxStatus waybill " + waybill + ",flag " + flag);
        } catch (SQLException e) {
            LogUtil.error(TAG, " findBoxStatus waybill " + waybill + ",flag " + flag + "\r\n " + e);
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * 根据订单信息更新取件密码\手机号
     *
     * @param pwd
     * @param exp_code
     * @param order_id
     * @return void 返回类型
     * @throws
     */
    public void updatePWD(String pwd, String exp_code, int isSubmit, String order_id) {

        String newPwd = pwd;
        if (!TextUtils.isEmpty(pwd)) {
            newPwd = pwd.toLowerCase();
        }
        try {
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.PWD_COLUMN, newPwd);
            ub.updateColumnValue(Pickup.ORDER_ID_COLUMN, order_id);
            ub.updateColumnValue(Pickup.IS_SUBMIT_COLUMN, isSubmit);
            ub.updateColumnValue(Pickup.PUSH_TYPE_COLUMN, 0);

            ub.where().eq(Pickup.WAY_BILL_COLUMN, exp_code);
            int count = ub.update();
            LogUtil.debug(TAG, "updatePWD waybill:" + exp_code + " pwd:" + newPwd + ",count "
                    + count);
        } catch (SQLException e) {
            LogUtil.error(TAG, "updatePWD waybill:" + exp_code + " pwd:" + newPwd + "\r\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 更新手机号码和取件密码
     *
     * @param curInfo
     * @param cell_code
     * @param exp_code
     */
    public boolean updatePhone(GoodsInfo curInfo, String cell_code, String exp_code) {
        boolean flag = false;
        try {
            String pwd = curInfo.pwd;
            if (!TextUtils.isEmpty(pwd)) {
                pwd = pwd.toLowerCase();
            }
            curInfo.pwd = pwd;
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.PWD_COLUMN, curInfo.pwd);
            ub.updateColumnValue(Pickup.PHONE_NUM_COLUMN, curInfo.phoneNum);

            ub.where().eq(Pickup.WAY_BILL_COLUMN, exp_code).and()
                    .eq(Pickup.BOX_ID_COLUMN, cell_code);
            int count = ub.update();
            if (count > 0) {
                flag = true;
            }
            LogUtil.debug(TAG, "updatePhone  waybill:" + exp_code + " cell_code:" + cell_code
                    + ",count " + count);
        } catch (SQLException e) {
            LogUtil.error(TAG, " updatePhone  waybill:" + exp_code + " cell_code:" + cell_code
                    + "\r\n" + e);
            e.printStackTrace();
        }

        return flag;
    }

    /**
     * 取件完成,标识已取件 取件方式(1:柜体, 2:app, 3:扫马枪, 4:管理后台)
     *
     * @param info
     */
    public void updatePickuped(GoodsInfo info, int type) {
        try {
            Dao<Pickup, Integer> dao = getDao();
            int count = dao
                    .updateRaw(
                            "update pickup set ispickup = ? ,pickupPhone = ?,end_time= ?,pickup_way=? where box_id = ? ",
                            info.isPickup + "", info.pickupPhone, info.end_time, type + "",
                            info.box_id);
            LogUtil.debug(TAG, "updatePickuped count : " + count + " info:" + info);
        } catch (SQLException e) {
            LogUtil.error(TAG, "updatePickuped " + " info:" + info + "\r\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 根据格口编号更新运单号（用于上报分配格口结果口）
     *
     * @param boxId
     * @param waybill
     */
    public void updateWaybill(String boxId, String waybill) {
        try {
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.WAY_BILL_COLUMN, waybill);
            ub.where().eq(Pickup.BOX_ID_COLUMN, boxId);
            int count = ub.update();
            LogUtil.debug(TAG, "updateWaybill count : " + count + " boxId:" + boxId + ",waybill:" + waybill);
        } catch (SQLException e) {
            LogUtil.error(TAG, "updateWaybill " + " boxId:" + boxId + ",waybill:" + waybill + "\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 格口关闭，更新记录标识
     *
     * @param boxID
     */
    public void updateBoxStatic(String boxID) {
        try {

            Dao<Pickup, Integer> dao = getDao();
            int count = dao
                    .updateRaw(
                            "update pickup set isValid = 2 , isSubmit = ? where isPickup=0 and (isSubmit=0 or isSubmit=3) and box_id = ?",
                            GoodsInfo.SUBMIT_STATUS_BEHIND + "", boxID);
            LogUtil.debug(TAG, " updateBoxStatic boxID:" + boxID + " count " + count);
        } catch (SQLException e) {
            LogUtil.error(TAG, " updateBoxStatic boxID:" + boxID + "\r\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 更新格口打开失败
     *
     * @param boxID
     */
    public void updateBoxOpenFail(String boxID) {
        try {

            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.IS_VALID_COLUMN, -1);
            ub.where().eq(Pickup.BOX_ID_COLUMN, boxID).and()
                    .eq(Pickup.IS_VALID_COLUMN, 0);
            int count = ub.update();
            LogUtil.info(TAG, " updateBoxStatic boxID:" + boxID + " count " + count);
        } catch (SQLException e) {
            LogUtil.error(TAG, "updateBoxOpenFailboxID:" + boxID + "\r\n" + e);
            e.printStackTrace();
        }

    }

    /**
     * 更新订单格口编号,设置打开标识
     *
     * @param order_id
     * @param boxID
     */
    public void updateOrderBoxId(String order_id, String boxID) {
        try {
            if (!TextUtils.isEmpty(boxID) && !TextUtils.isEmpty(order_id)) {
                Dao<Pickup, Integer> dao = getDao();
                UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
                ub.updateColumnValue(Pickup.IS_VALID_COLUMN, 1);
                ub.where().eq(Pickup.BOX_ID_COLUMN, boxID).and()
                        .eq(Pickup.ORDER_ID_COLUMN, order_id);
                int count = ub.update();
            }
            LogUtil.debug(TAG, " updateOrderBoxId boxID:" + boxID + " order_id:" + order_id);

        } catch (Exception e) {
            LogUtil.error(TAG, " updateOrderBoxId boxID:" + boxID + " order_id:" + order_id
                    + "\r\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 更新订单订单id,设置打开标识
     *
     * @param order_id 新的订单ID
     * @param boxID
     */
    public void updateOrderId(String order_id, String boxID) {
        if (!TextUtils.isEmpty(boxID) && !TextUtils.isEmpty(order_id)) {
            try {
                Dao<Pickup, Integer> dao = getDao();
                UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
                ub.updateColumnValue(Pickup.ORDER_ID_COLUMN, order_id);
                ub.where().eq(Pickup.BOX_ID_COLUMN, boxID);
                int count = ub.update();
                LogUtil.debug(TAG, " updateOrderId boxID:" + boxID + " order_id:" + order_id
                        + " count " + count);

            } catch (Exception e) {
                LogUtil.error(TAG, " updateOrderId boxID:" + boxID + " order_id:" + order_id
                        + "\r\n" + e);
                e.printStackTrace();
            }
        }
    }

    /**
     * 更新订单格口编号,设置打开标识
     *
     * @param order_id
     * @param boxID
     */
    public void updateOrderPickUptime(String order_id, String boxID, String order_time) {
        try {
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.ORDER_TIME_COLUMN, order_time);
            ub.where().eq(Pickup.BOX_ID_COLUMN, boxID).and()
                    .eq(Pickup.ORDER_ID_COLUMN, order_id);
            int count = ub.update();
            LogUtil.debug(TAG, "updateOrderPickUptime boxID:" + boxID + " order_id:" + order_id
                    + " order_time " + order_time + "count " + count);
        } catch (Exception e) {
            LogUtil.error(TAG, "updateOrderPickUptime boxID:" + boxID + " order_id:" + order_id
                    + " order_time " + order_time + "\r\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 更新推送类型
     *
     * @param box_id
     * @param push_type
     */
    public void updatePushTypeAndSource(String box_id, int push_type) {
        try {
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.PUSH_TYPE_COLUMN, push_type);
            ub.updateColumnValue(Pickup.SOURCE_COLUMN, 1);
            ub.where().eq(Pickup.BOX_ID_COLUMN, box_id);
            int count = ub.update();
            LogUtil.debug(TAG, "updatePushTypeAndSource box_id:" + box_id + " push_type:"
                    + push_type + " count " + count);
        } catch (Exception e) {
            LogUtil.error(TAG, "updatePushTypeAndSource box_id:" + box_id + " push_type:"
                    + push_type + "\r\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 更新推送类型
     *
     * @param box_id
     * @param push_type
     */
    public void updatePushType(String box_id, int push_type) {
        try {
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.PUSH_TYPE_COLUMN, push_type);
            ub.where().eq(Pickup.BOX_ID_COLUMN, box_id);
            int count = ub.update();
            LogUtil.debug(TAG, "updatePushType box_id:" + box_id + " push_type:" + push_type
                    + " count " + count);
        } catch (Exception e) {
            LogUtil.error(TAG, "updatePushType box_id:" + box_id + " push_type:" + push_type
                    + "\r\n" + e);
            e.printStackTrace();
        }
    }

    /**
     * 更新格口信息和提交状态
     *
     * @param info
     * @return
     */
    public boolean updateBoxId(GoodsInfo info) {
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.BOX_ID_COLUMN, info.box_id);
            ub.updateColumnValue(Pickup.IS_SUBMIT_COLUMN, info.isSubmit);
            ub.updateColumnValue(Pickup.PHONE_NUM_COLUMN, info.phoneNum);
            ub.updateColumnValue(Pickup.DELIVERY_PAY_COLUMN, info.deliveryPay);
            if (info.isValid == 2) {
                ub.updateColumnValue(Pickup.IS_VALID_COLUMN, 1);
            }
            ub.where().eq("waybill", info.waybill);
            int count = ub.update();
            flag = count != 0;
            LogUtil.debug(TAG, "updateBoxId flag " + flag + " info " + info);
        } catch (Exception e) {
            LogUtil.error(TAG, "updateBoxId flag " + flag + " info " + info);
            e.printStackTrace();
        }

        return flag;
    }

    /**
     * 更新数据库中订单状态为已提交
     *
     * @param status
     * @param order_id
     */
    public boolean updateStatus(String order_id, int status) {
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            UpdateBuilder<Pickup, Integer> ub = dao.updateBuilder();
            ub.updateColumnValue(Pickup.IS_SUBMIT_COLUMN, status);
            ub.where().eq(Pickup.ORDER_ID_COLUMN, order_id);
            int count = ub.update();
            flag = count != 0;
            LogUtil.debug(TAG, "updateStatus  order_id " + order_id + " flag " + flag);
        } catch (Exception e) {
            LogUtil.error(TAG, "updateStatus  order_id " + order_id + "\r\n" + e);
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * 取件完成,已提交服务器 删除数据记录
     *
     * @param waybill
     */
    public boolean delectPickupOrder(String waybill) {
        boolean flag = false;
        if (TextUtils.isEmpty(waybill)) {
            return flag;
        }
        try {
            Dao<Pickup, Integer> dao = getDao();
            DeleteBuilder<Pickup, Integer> db = dao.deleteBuilder();
            db.where().eq(Pickup.WAY_BILL_COLUMN, waybill);
            int count = db.delete();
            flag = count > 0;
            LogUtil.debug(TAG, " delectPickupOrder waybill:" + waybill + " count:" + count);
        } catch (Exception e) {
            LogUtil.error(TAG, " delectPickupOrder waybill:" + waybill + "\r\n" + e);
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * @param orderId
     */
    public boolean delectPickupByOrderId(String orderId) {
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            DeleteBuilder<Pickup, Integer> db = dao.deleteBuilder();
            db.where().eq(Pickup.ORDER_ID_COLUMN, orderId);
            int count = db.delete();
            flag = count > 0;
            LogUtil.debug(TAG, " delectPickupOrder order_id:" + orderId + " count " + count);
        } catch (Exception e) {
            LogUtil.error(TAG, " delectPickupOrder order_id:" + orderId + " \r\n " + e);
            e.printStackTrace();
            return false;
        }
        return flag;
    }

    /**
     * 清空数据表
     */
    public boolean delectAll() {
        boolean flag = false;
        try {
            int count = TableUtils.clearTable(mDatabaseHelper.getConnectionSource(),
                    Pickup.class);
            flag = count > 0;
            LogUtil.debug(TAG, " delectAll num:" + count);
        } catch (Exception e) {
            LogUtil.error(TAG, "delectAll:" + e);
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * @param boxId
     */
    public boolean delectPickupByBoxId(String boxId) {
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            DeleteBuilder<Pickup, Integer> db = dao.deleteBuilder();
            db.where().eq(Pickup.BOX_ID_COLUMN, boxId);
            int count = db.delete();
            flag = count > 0;
            LogUtil.debug(TAG, " delectPickupOrder box_id:" + boxId + " num:" + count);
        } catch (Exception e) {
            LogUtil.error(TAG, " delectPickupOrder box_id:" + boxId + "\r\n" + e);
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * @param boxId
     * @param waybill
     */
    public boolean delectPickupByBoxIdAndWaybill(String boxId, String waybill) {
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            DeleteBuilder<Pickup, Integer> db = dao.deleteBuilder();
            db.where().eq(Pickup.BOX_ID_COLUMN, boxId)
                    .and()
                    .eq(Pickup.WAY_BILL_COLUMN, waybill);
            int count = db.delete();
            flag = count > 0;
            LogUtil.debug(TAG, " delectPickupOrder box_id:" + boxId + ",waybill" + waybill + " num:" + count);
        } catch (Exception e) {
            LogUtil.error(TAG, " delectPickupOrder box_id:" + boxId + ",waybill" + waybill + "\n" + e);
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * 删除无效订单记录
     */
    public boolean deleteBoxIsNull() {
        boolean flag = false;
        try {
            Dao<Pickup, Integer> dao = getDao();
            DeleteBuilder<Pickup, Integer> db = dao.deleteBuilder();
            db.where().eq(Pickup.SOURCE_COLUMN, 0).and().isNull(Pickup.BOX_ID_COLUMN);
            int count = db.delete();
            flag = count != 0;
            LogUtil.debug(TAG, "deleteBoxIsNull delete:" + count);
        } catch (Exception e) {
            LogUtil.error(TAG, "deleteBoxIsNull :" + e);
            e.printStackTrace();
        }
        return flag;
    }

    /**
     * 根据密码进行取件
     *
     * @param pwd
     * @return
     */
    public GoodsInfo pickup(String pwd) {
        GoodsInfo info = null;
        GenericRawResults<GoodsInfo> results = null;
        try {
            Dao<Pickup, Integer> dao = getDao();
            if (!TextUtils.isEmpty(pwd)) {
                pwd = pwd.toLowerCase();
            }
            results = dao.queryRaw(QUERY_HEAD + " where pwd=? and isPickup=0", rawRowMapper, pwd);

            if (results != null) {
                for (GoodsInfo result : results) {
                    info = result;
                }
            }
            LogUtil.debug(TAG, "pickup pwd:" + pwd);
        } catch (SQLException e) {
            LogUtil.error(TAG, "pickup pwd:" + pwd + "\r\n" + e);
            e.printStackTrace();
        }
        return info;
    }

    /**
     * 根据密码进行取件
     *
     * @param boxId
     */
    public GoodsInfo pickupByBox(String boxId) {
        GoodsInfo info = null;
        GenericRawResults<GoodsInfo> results = null;
        try {
            Dao<Pickup, Integer> dao = getDao();
            results = dao.queryRaw(QUERY_HEAD + " where " + Pickup.BOX_ID_COLUMN
                    + "=? and isPickup=0", rawRowMapper, boxId);

            if (results != null) {
                for (GoodsInfo result : results) {
                    info = result;
                }
            }
            LogUtil.debug(TAG, "pickup boxId:" + boxId);
        } catch (SQLException e) {
            LogUtil.error(TAG, "pickup boxId:" + boxId + "\r\n" + e);
            e.printStackTrace();
        }
        return info;
    }

    /**
     * 根据格口信息查询订单信息
     *
     * @param box_id
     * @param @return
     * @return GoodsInfo 返回类型
     * @throws
     */
    public GoodsInfo findByBoxId(String box_id) {
        GoodsInfo info = null;
        GenericRawResults<GoodsInfo> results = null;

        try {
            Dao<Pickup, Integer> dao = getDao();
            results = dao.queryRaw(QUERY_HEAD + " where box_id=? and isPickup=0", rawRowMapper,
                    box_id);
            LogUtil.debug(
                    TAG,
                    "select order_id,box_id,order_time,end_time,deliveryType,type,loginID,icID,fingerprintID,waybill,phoneNum,pickupPhone,pwd,pickupPay,isSubmit,isValid,delivery_pay,source,push_type,ispickup from pickup where box_id="
                            + box_id + " and isPickup=0");

            if (results != null) {
                for (GoodsInfo result : results) {
                    info = result;
                }
            }
        } catch (SQLException e) {
            LogUtil.error(TAG, " findByBoxId boxID " + box_id + "\r\n" + e);
            e.printStackTrace();
        }
        return info;
    }

    /**
     * 根据order_id查询订单
     *
     * @param order_id
     * @param @return
     * @return GoodsInfo 返回类型
     * @throws
     */
    public GoodsInfo findByOrderID(String order_id) {
        GoodsInfo info = null;
        GenericRawResults<GoodsInfo> results = null;
        try {
            Dao<Pickup, Integer> dao = getDao();

            results = dao.queryRaw(QUERY_HEAD + " where order_id=? and isPickup=0", rawRowMapper,
                    order_id);

            if (results != null) {
                for (GoodsInfo result : results) {
                    info = result;
                }
            }

            LogUtil.debug(TAG, " findByOrderID order_id " + order_id);
        } catch (SQLException e) {
            LogUtil.error(TAG, " findByOrderID order_id " + order_id + "\r\n" + e);
            e.printStackTrace();
        }
        return info;
    }

    /**
     * // 区分来源 柜体操作，推送操作 添加投递订单信息
     */
    public boolean insert(GoodsInfo info) {
        boolean flag = false;
        Pickup pickup = new Pickup();
        pickup.setOrderId(info.order_id);
        pickup.setBoxId(info.box_id);
        pickup.setOrderTime(info.order_time);
        pickup.setDeliveryType(info.deliveryType + "");
        pickup.setType(info.type);
        pickup.setLoginID(info.loginID);
        pickup.setIcID(info.icID);
        pickup.setFingerprintID(info.fingerprintID);
        pickup.setWaybill(info.waybill);
        pickup.setPhoneNum(info.phoneNum);
        pickup.setPickupPhone(info.pickupPhone);
        String pwd = info.pwd;
        if (!TextUtils.isEmpty(pwd)) {
            pwd = pwd.toLowerCase();
        }
        pickup.setPwd(pwd);
        pickup.setIsPickup(info.isPickup);
        pickup.setIsSubmit(info.isSubmit);
        pickup.setIsValid(info.isValid);
        pickup.setSource(info.source);
        pickup.setPushType(info.push_type);
        pickup.setDeliveryPay(info.deliveryPay);
        pickup.setPaySide(info.pay_side);

        int num = 0;
        if(!TextUtils.isEmpty(info.box_id)) {
            GoodsInfo temp = findByBoxId(info.box_id) ;
            if(temp!=null) {
                LogUtil.warning(TAG," 格口信息存在 " + temp);
            }
        }
        num = save(pickup);

        flag = num > 0;
        LogUtil.debug(TAG, "insert info " + flag + " 订单信息 " + info);
        return flag;
    }

    /**
     * 下载还原数据库数据 区分来源 柜体操作，推送操作,需要和服务器字段保持一致
     *
     * @return
     */
    public void insertALL(List<GoodsInfo> infos) {
        if (infos != null && infos.size() > 0) {
            for (GoodsInfo info : infos) {
                insert(info);
            }
        }
    }

    /**
     * 通过loginID 获取3天未取走的滞留件 大于两天就算三天
     *
     * @param @return
     * @return
     * @throws
     */
    public List<GoodsNumber> count() {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            // GenericRawResults<GoodsInfo> rawResults =
            // orderDao.queryRaw(QUERY_HEAD+"SELECT loginID,count(order_id) FROM pickup WHERE isSubmit=2 AND isPickup=0 GROUP BY loginID ;"
            // +new String[]{});

            GenericRawResults<GoodsNumber> results = orderDao
                    .queryRaw(
                            " SELECT loginID,count(order_id) FROM pickup WHERE isSubmit=2 AND isPickup=0 AND ?-order_time > 172800000 GROUP BY loginID ",
                            rawRowMapper1, currenTime + "");

            // List<GoodsInfo> results = rawResults.getResults();
            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 通过loginID 分组查询 和 获取3天未取走的滞留件 大于两天就算三天
     *
     * @param @return
     * @return
     * @throws
     */
    public List<GoodsNumber> count3(String loginID) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            // GenericRawResults<GoodsInfo> rawResults =
            // orderDao.queryRaw(QUERY_HEAD+"SELECT loginID,count(order_id) FROM pickup WHERE isSubmit=2 AND isPickup=0 GROUP BY loginID ;"
            // +new String[]{});

            GenericRawResults<GoodsNumber> results = orderDao
                    .queryRaw(
                            " SELECT loginID,count(order_id) FROM pickup WHERE isSubmit=2 AND isPickup=0 AND loginID = ? AND ?-order_time > 172800000 AND ?-order_time<=259200000 ",
                            rawRowMapper1, loginID, currenTime + "", currenTime + "");

            // List<GoodsInfo> results = rawResults.getResults();
            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 通过loginID 获取4天未取走的滞留件
     *
     * @param @return
     * @return
     * @throws
     */
    public List<GoodsNumber> count4(String loginID) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsNumber> results = orderDao
                    .queryRaw(
                            " SELECT loginID,count(order_id) FROM pickup WHERE isSubmit=2 AND isPickup=0 AND loginID = ? AND ?-order_time > 259200000 AND ?-order_time<=345600000",
                            rawRowMapper1, loginID, currenTime + "", currenTime + "");

            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 通过loginID 获取5天未取走的滞留件数量
     *
     * @param @return
     * @return
     * @throws
     */
    public List<GoodsNumber> count5(String loginID) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsNumber> results = orderDao
                    .queryRaw(
                            " SELECT loginID,count(order_id) FROM pickup WHERE isSubmit=2 AND isPickup=0 AND loginID = ? AND ?-order_time > 345600000 AND ?-order_time<=432000000",
                            rawRowMapper1, loginID, currenTime + "", currenTime + "");

            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 通过loginID 获取5天以上未取走的滞留件
     *
     * @param @return
     * @return
     * @throws
     */
    public List<GoodsNumber> count5More(String loginID) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsNumber> results = orderDao
                    .queryRaw(
                            " SELECT loginID,count(order_id) FROM pickup WHERE isSubmit=2 AND isPickup=0 AND loginID = ? AND ?-order_time > 432000000",
                            rawRowMapper1, loginID, currenTime + "");// 432000000
            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 3天未取的滞留件列表
     *
     * @param loginID
     * @param start
     * @param count
     * @param @return
     * @return List<GoodsInfo>
     * @throws
     */
    public List<GoodsInfo> noPickUplist3(String loginID, long start, long count) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsInfo> results = orderDao
                    .queryRaw(
                            "SELECT loginID,order_time,waybill,phoneNum,isSubmit,box_id,order_id FROM pickup WHERE isSubmit=2 AND isPickup=0 AND ?-order_time > 172800000 AND ?-order_time<=259200000 AND loginID = ? LIMIT ?,?",
                            rawRowMapper2, currenTime + "", currenTime + "", loginID, start + "",
                            count + "");

            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 4天未取的滞留件列表
     *
     * @param loginID
     * @param start
     * @param count
     * @param @return
     * @return List<GoodsInfo>
     * @throws
     */
    public List<GoodsInfo> noPickUplist4(String loginID, long start, long count) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsInfo> results = orderDao
                    .queryRaw(
                            "SELECT loginID,order_time,waybill,phoneNum,isSubmit,box_id,order_id FROM pickup WHERE isSubmit=2 AND isPickup=0 AND ?-order_time > 259200000 AND ?-order_time<=345600000 AND loginID = ? LIMIT ?,?",
                            rawRowMapper2, currenTime + "", currenTime + "", loginID, start + "",
                            count + "");
            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 5天未取的滞留件列表
     *
     * @param loginID
     * @param start
     * @param count
     * @param @return
     * @return List<GoodsInfo>
     * @throws
     */
    public List<GoodsInfo> noPickUplist5(String loginID, long start, long count) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsInfo> results = orderDao
                    .queryRaw(
                            "SELECT loginID,order_time,waybill,phoneNum,isSubmit,box_id,order_id FROM pickup WHERE isSubmit=2 AND isPickup=0 AND ?-order_time > 345600000 AND ?-order_time<=432000000 AND loginID = ? LIMIT ?,?",
                            rawRowMapper2, currenTime + "", currenTime + "", loginID, start + "",
                            count + "");
            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 5天以上未取的滞留件列表
     *
     * @param loginID
     * @param start
     * @param count
     * @param @return
     * @return List<GoodsInfo>
     * @throws
     */
    public List<GoodsInfo> noPickUplist5More(String loginID, long start, long count) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsInfo> results = orderDao
                    .queryRaw(
                            "SELECT loginID,order_time,waybill,phoneNum,isSubmit,box_id,order_id FROM pickup WHERE isSubmit=2 AND isPickup=0 AND ?-order_time > 432000000 AND loginID = ? LIMIT ?,?",
                            rawRowMapper2, currenTime + "", loginID, start + "", count + "");
            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 所有未取的滞留件列表
     *
     * @param loginID
     * @param start
     * @param count
     * @param @return
     * @return List<GoodsInfo>
     * @throws
     */
    public List<GoodsInfo> noPickUplist(String loginID, long start, long count) {
        long currenTime = System.currentTimeMillis();// 当前的时间
        try {
            Dao<Pickup, Integer> orderDao = getDao();
            GenericRawResults<GoodsInfo> results = orderDao
                    .queryRaw(
                            "SELECT loginID,order_time,waybill,phoneNum,isSubmit,box_id,order_id FROM pickup WHERE isSubmit=2 AND isPickup=0 AND ?-order_time > 172800000 AND loginID = ? LIMIT ?,?",
                            rawRowMapper2, currenTime + "", loginID, start + "", count + "");
            return results.getResults();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 获得 某个 发件人（快递员） 在这个柜体投递的数量
     *
     * @param courierPhone 快递员的电话号码
     * @return
     */
    public int getCountOfNoPickup(String courierPhone) {
        try {
            GenericRawResults rawResults =
                    getDao().queryRaw(
                            String.format("select count(*) from %s where %s = '%s'", Pickup.TABLE_NAME, Pickup.LOGIN_ID_COLUMN, courierPhone));
            // there should be 1 result
            List results = rawResults.getResults();
            // the results array should have 1 value
            int res = Integer.parseInt(((String[]) results.get(0))[0]);
            return res;
        } catch (SQLException e) {
            e.printStackTrace();
            return 0;
        }
    }
}
/*
 * Copyright (c) 2014-2015 Zhong Ke Fu Chuang (Beijing) Technology Co., Ltd.  All Rights Reserved.
 *
 */

package cn.jlb.pro.intelligentcabinet.entity;

import java.util.List;

/**
 * 广告信息实体
 *
 * @author
 * @version V1.0
 * @date 2015-1-19 上午11:42:42
 */
public class AdvertInfo {
    /**
     * 广告位置 首页
     */
    public static final int AREA_ID_HOME = 0;
    /**
     * 广告位置 登录
     */
    public static final int AREA_ID_LOGIN = 1;
    /**
     * 广告位置 取件
     */
    public static final int AREA_ID_PICKUP = 2;
    /**
     * 广告位置 投递信息
     */
    public static final int AREA_ID_DELIVERY_INFO = 3;
    /**
     * 广告位置 选择箱口
     */
    public static final int AREA_ID_DELIVERY_TYPE = 4;
    /**
     * 广告位置 投递列表
     */
    public static final int AREA_ID_DELIVERY_LIST = 5;
    /**
     * 广告位置 充值支付页面
     */
    public static final int AREA_ID_RECHARGE = 6;
    /**
     * 广告位置 查询
     */
    public static final int AREA_ID_INQUERY = 7;
    /**
     * 帮助位置 帮助
     */
    public static final int AREA_ID_HELP = 8;
    /**
     * 文字
     */
    public static final int TYPE_TEXT = 1;
    /**
     * 图片
     */
    public static final int TYPE_IMAGE = 2;
    /**
     * 视频
     */
    public static final int TYPE_VIDEO = 3;
    /**
     * 默认状态
     */
    public static final int STATUS_DEFAULT = 0;
    /**
     * 下载中
     */
    public static final int STATUS_DOWNLOAD = 1;
    /**
     * 下载完成
     */
    public static final int STATUS_FINISH = 1;
    public int area_id;
    public int orderno;
    /**
     * 用于广告本地路径
     */
    public String forward_url;
    public String title;
    public String start_time;
    public String update_time;
    public int play_interval;
    public String content;
    public String create_time;
    public String resource_url;
    public String end_time;
    public int type;
    public List<AdvertInfo> sub_list;
    /**
     * 状态：初始状态0，下载中1，下载完成2
     */
    public int status;

    @Override
    public String toString() {
        return "AdvertInfo [area_id=" + area_id + ", orderno=" + orderno + ", "
                + (forward_url != null ? "forward_url=" + forward_url + ", " : "")
                + (title != null ? "title=" + title + ", " : "")
                + (start_time != null ? "start_time=" + start_time + ", " : "")
                + (update_time != null ? "update_time=" + update_time + ", " : "")
                + "play_interval=" + play_interval + ", "
                + (content != null ? "content=" + content + ", " : "")
                + (create_time != null ? "create_time=" + create_time + ", " : "")
                + (resource_url != null ? "resource_url=" + resource_url + ", " : "")
                + (end_time != null ? "end_time=" + end_time + ", " : "") + "type=" + type + ", "
                + (sub_list != null ? "sub_list=" + sub_list + ", " : "") + "status=" + status
                + "]";
    }
}
package cn.jlb.pro.intelligentcabinet.entity;

/**
 * 格口实体类
 *
 * @author wqr
 */
public class BoxInfo {
    /**
     * 新 11101: 空闲 ，11104: 预定 旧 1 空闲，2 预订
     */
    public int status;
    /**
     * 类型，大中小超小 箱体规格：1:大 2:中 3:小 4:极小
     */
    public int type;// 大小
    /**
     * 格口编号
     */
    public int code;
    public String hireTime;// 租用时间
    public boolean isUse = false; // 是否占用
    public boolean isRevice = false;
    /**
     * 调用优先级
     */
    public int priority;
    /**
     * 消息来源
     */
    public int source;

    @Override
    public String toString() {
        return "BoxInfo [status=" + status + ", type=" + type + ", code=" + code + ", isUse="
                + isUse + ", priority=" + priority + "]";
    }

}
package cn.jlb.pro.intelligentcabinet.entity;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * Created by jsj on 15/8/10.
 */
public class DeliverRechargeReward implements Serializable {

    public int status;
    public String update_time;
    public String description;
    public String img;
    public String title;
    public String start_time;
    public String create_time;
    public int conf_id;
    public int type;
    public int id;
    public String end_time;
    public RewardConf reward_conf;

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public String getUpdate_time() {
        return update_time;
    }

    public void setUpdate_time(String update_time) {
        this.update_time = update_time;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getImg() {
        return img;
    }

    public void setImg(String img) {
        this.img = img;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getStart_time() {
        return start_time;
    }

    public void setStart_time(String start_time) {
        this.start_time = start_time;
    }

    public String getCreate_time() {
        return create_time;
    }

    public void setCreate_time(String create_time) {
        this.create_time = create_time;
    }

    public int getConf_id() {
        return conf_id;
    }

    public void setConf_id(int conf_id) {
        this.conf_id = conf_id;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getEnd_time() {
        return end_time;
    }

    public void setEnd_time(String end_time) {
        this.end_time = end_time;
    }

    public RewardConf getReward_conf() {
        return reward_conf;
    }

    public void setReward_conf(RewardConf reward_conf) {
        this.reward_conf = reward_conf;
    }

    @Override
    public String toString() {
        return "DeliverRechargeReward [status=" + this.status + ", "
                + (this.update_time != null ? "update_time=" + this.update_time + ", " : "")
                + (this.description != null ? "description=" + this.description + ", " : "")
                + (this.img != null ? "img=" + this.img + ", " : "")
                + (this.title != null ? "title=" + this.title + ", " : "")
                + (this.start_time != null ? "start_time=" + this.start_time + ", " : "")
                + (this.create_time != null ? "create_time=" + this.create_time + ", " : "")
                + "conf_id=" + this.conf_id + ", type=" + this.type + ", id=" + this.id + ", "
                + (this.end_time != null ? "end_time=" + this.end_time + ", " : "")
                + (this.reward_conf != null ? "gift_conf=" + this.reward_conf : "") + "]";
    }

    /**
     * 充值赠送
     *
     * @author
     * @date 2015-1-9 下午3:14:24
     */
    public static class RewardConf implements Serializable {
        public ArrayList<RewardItem> alipay;
        public ArrayList<RewardItem> weixin;

        @Override
        public String toString() {
            return "RewardConf [" + (this.alipay != null ? "alipay=" + this.alipay : "")
                    + (this.weixin != null ? "weixin=" + this.weixin : "") + "]";
        }
    }

    /**
     * 充值信息
     *
     * @author
     * @date
     */
    public static class RewardItem implements Serializable {
        /**
         * 充值金额
         */
        public int recharge_amount;

        /**
         * 赠送金额
         */
        public int reward_amount;

        @Override
        public String toString() {
            return "RewardItem [recharge_amount=" + this.recharge_amount + ", reward_amount="
                    + this.reward_amount + "]";
        }
    }

}
/*
 * Copyright (c) 2014-2015 Zhong Ke Fu Chuang (Beijing) Technology Co., Ltd.  All Rights Reserved.
 *
 */

package cn.jlb.pro.intelligentcabinet.entity;

import java.io.Serializable;
import java.util.List;

/**
 * 历史投递的bean
 *
 * @author 蒋淑静
 * @version V1.0
 * @date 2015年6月16日 上午11:42:07
 */
public class DeliveryListInfo implements Serializable {

    /**
     * 总记录数
     */
    public long count;
    /**
     * 返回的记录数
     */
    public long real_count;

    public List<DeliveryInfo> list;

    @Override
    public String toString() {
        return "总数：：：：" + count + "======实际返回数：：：" + real_count;
    }

    public class DeliveryInfo {
        /**
         * 运单号
         */
        public String exp_code;

        /**
         * 收件人电话
         */
        public String consignee_phone;

        /**
         * 格口编号
         */
        public int cell_code;

        /**
         * 投递时间
         */
        public String in_time;

        /**
         * 投递员电话
         */
        public String courier_phone;

        /**
         * 订单状态
         */
        public String status;

    }

}
package cn.jlb.pro.intelligentcabinet.entity;

import java.io.Serializable;
import java.util.List;

/**
 * 快递查询，的结果集
 * Created by jsj on 15/8/10.
 */
public class InQueryResultBundle implements Serializable {

    public int count;//':'总条数'，
    public List<InQueryResultItem> list;


    public static class InQueryResultItem {
        public int order_id;//': '快件id',
        public Express_info express_info;
        public Cabinet_info cabinet_info;//';
        public String courier_phone;//':"寄件人电话"
        public String exp_code;//':'运单编号',
        public String consignee_phone;//':'收件人电话',
        public String in_time;//':'入库时间',
        public boolean is_tolimit;//':true:本次发送完后, 到达发送次数限制false:未到达限制

        public boolean isPlay;
        public long currentTime;
    }

    public static class Express_info {
        public int id;//”: 快递公司id
        public String name;//”: 快递公司名称
        public String img;//”: 快递公司logo
        public String exp_rule;//": 快递公司正则
    }

    public static class Cabinet_info {
        public String code;//':“柜体编号”,
        public String addr;//':'柜体地址',
    }

//    'list':[
//
//    {
//        'id':'快件id',
//            'express_info':{
//        “id”:快递公司id
//        “name”:快递公司名称
//        “img”:快递公司logo
//        "exp_rule":快递公司正则
//    },
//        'cabinet_info':{
//        'code':“柜体编号”,
//        'addr':'柜体地址',
//    },
//        'courier_phone':"寄件人电话"
//        'exp_code':'运单编号',
//            'consignee_phone':'收件人电话',
//            'in_time':'入库时间',
//            'is_tolimit':true:本次发送完后, 到达发送次数限制
//        false:未到达限制
//    }
}
package cn.jlb.pro.intelligentcabinet.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * 登录信息
 *
 * @author wqr
 */
public class LoginInfo {
    public boolean isLogin;
    public String loginType = "";// 登录类型 PH-手机号 IC-RF卡号 FP-指纹号
    /**
     * 登录ID，登录手机号
     */
    public String loginID = "";
    /**
     * 登录手机号
     */
    public String phone = "";
    /**
     * car ID
     */
    public String cardID = "";

    /**
     * 账号uid
     */
    public int uid;

    /**
     * 指纹ID
     */
    public String fingerprintID = "";

    /**
     * 主副账号总额
     */
    public int balance;

    /**
     * 主副账号本地计算余额
     */
    public int reallyBalance;

    /**
     * 验证码
     */
    public String pcode;

    public CabinetInfo cabinet_info = new CabinetInfo();

    /**
     * 滞留件信息
     */
    public MyDelivery my_delivery = new MyDelivery();

    /**
     * 充值金额
     */
    public int cash;
    /**
     * 当前业务流程
     */
    public int index;
    /**
     * 充值前操作流程
     */
    public int RechargeIndex;
    /**
     * 1：投递员 2：寄存人 3：管理员
     */
    public int refer;
    /**
     * 是否管理员
     */
    public boolean is_admin = false;

    public List<AvailCells> avail_cells = new ArrayList<AvailCells>();

    /**
     * 所有可用的格口信息
     */
    public List<BoxInfo> infos = new ArrayList<BoxInfo>();

    /**
     * 滞留件
     */
    public List<GoodsInfo> infosOld = new ArrayList<GoodsInfo>();

    /**
     * 收费标记，表明该柜体格口试用是收费的,投递
     */
    public boolean chargeFlagDeliver;
    /**
     * 收费标记，表明该柜体格口是收费的，使用费用
     */
    public boolean chargeFlagUse;

    /**
     * 柜体操作时，记录当次用户打开未关闭的格口，可用来区分 柜体和推送 操作
     */
    public HashMap<String, Integer> boxs = new HashMap<String, Integer>();

    public String cell_opened = "0";

    public boolean isFirst = true;

    @Override
    public String toString() {
        return "LoginInfo [isLogin=" + isLogin + ", "
                + (loginType != null ? "loginType=" + loginType + ", " : "")
                + (loginID != null ? "loginID=" + loginID + ", " : "")
                + (phone != null ? "phone=" + phone + ", " : "")
                + (cardID != null ? "cardID=" + cardID + ", " : "") + "uid=" + uid + ", "
                + (fingerprintID != null ? "fingerprintID=" + fingerprintID + ", " : "")
                + "balance=" + balance + ", reallyBalance=" + reallyBalance + ", pcode=" + pcode
                + ", " + (cabinet_info != null ? "cabinet_conf=" + cabinet_info + ", " : "")
                + (my_delivery != null ? "my_delivery=" + my_delivery + ", " : "") + "cash=" + cash
                + ", index=" + index + ", RechargeIndex=" + RechargeIndex + ", refer=" + refer
                + ", is_admin=" + is_admin + ", "
                + (avail_cells != null ? "avail_cells=" + avail_cells + ", " : "")
                + (infos != null ? "infos=" + infos + ", " : "") + "chargeFlagDeliver="
                + chargeFlagDeliver + ", chargeFlagDeposit=" + chargeFlagUse + ", "
                + (boxs != null ? "boxs=" + boxs : "") + "]";
    }

    /**
     * 格口信息
     *
     * @author
     * @date 2015年6月16日 下午4:19:58
     */
    public static class AvailCells {
        /**
         * 格口状态
         */
        public int status;
        /**
         * 格口编号
         */
        public int code;
        /**
         * 格口类型
         */
        public int type;

        @Override
        public String toString() {
            return "AvailCells [status=" + status + ", code=" + code + ", type=" + type + "]";
        }

    }

}
package cn.jlb.pro.intelligentcabinet.ui.activity;

import android.inputmethodservice.KeyboardView;
import android.text.Html;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

import org.apache.http.Header;
import org.json.JSONObject;

import cn.jlb.pro.core.net.Apis;
import cn.jlb.pro.core.net.MyJsonResponseHandler;
import cn.jlb.pro.core.utils.NetUtils;
import cn.jlb.pro.intelligentcabinet.R;
import cn.jlb.pro.intelligentcabinet.app.SimpleActivity;
import cn.jlb.pro.intelligentcabinet.app.SimpleActivity.CmdListener;
import cn.jlb.pro.intelligentcabinet.config.Constants;
import cn.jlb.pro.intelligentcabinet.entity.AdvertInfo;
import cn.jlb.pro.intelligentcabinet.utils.CountDownClock;
import cn.jlb.pro.intelligentcabinet.utils.PopupKeyboardUtil;
import cn.jlb.pro.intelligentcabinet.utils.SoftKeyboardUtil;
import cn.jlb.pro.intelligentcabinet.utils.Util;
import cn.jlb.pro.intelligentcabinet.websvc.CabzooRequester;

/**
 * 投递卡绑定界面
 *
 * @author wqr
 */
public class BindActivity extends SimpleActivity implements OnClickListener, CmdListener {
    /**
     * 登录来源 (1: 投递 2:寄存)
     */
    private static final String REFER = "1";
    private TextView tvCard, tvInputPhone, tvDesc1;
    private EditText etPhone, etVertify;
    private Button btnVertify, btnBingAction;
    private String mCmd, cardID;
    /**
     * 0说明该IC卡已绑定手机号 1说明该IC卡未绑定手机号
     */
    private int type = 0;
    /**
     * 0需验证是否绑定 1不需验证绑定
     */
    private int vertify = 0;
    private String bindPhone = "";
    private CabzooRequester requester;
    private String phone, phoneTMP, verify, reVerify;
    private LinearLayout llyTvPhone, llyEtPhone;
    private SoftKeyboardUtil mSmallKeyboardUtil;
    private CountDownClock mCountDownClock;

    @Override
    public void initUI() {
        setContentView(R.layout.activity_bind);
        cardID = getIntent().getStringExtra("cardID");
        vertify = getIntent().getIntExtra("vertify", -1);

        tvCard = (TextView) findViewById(R.id.tv_card);
        tvInputPhone = (TextView) findViewById(R.id.tv_input_phone);
        tvDesc1 = (TextView) findViewById(R.id.text_desc1);

        llyTvPhone = (LinearLayout) findViewById(R.id.lly_tv_phone);
        llyEtPhone = (LinearLayout) findViewById(R.id.lly_et_phone);

        etPhone = (EditText) findViewById(R.id.et_input_phone);
        btnVertify = (Button) findViewById(R.id.btn_get_vertify);
        etVertify = (EditText) findViewById(R.id.et_input_vertify);
        btnBingAction = (Button) findViewById(R.id.btn_bind_action);
        findViewById(R.id.activity_menu_goHome).setOnClickListener(this);
        btnVertify.setOnClickListener(this);
        btnBingAction.setOnClickListener(this);
        PopupKeyboardUtil.hideSystemSofeKeyboard(etPhone);
        PopupKeyboardUtil.hideSystemSofeKeyboard(etVertify);


        mSmallKeyboardUtil = new SoftKeyboardUtil(this, (KeyboardView) findViewById(R.id.keyboard_view), SoftKeyboardUtil.KEYBOARD_TYPE_SMALL);
        mSmallKeyboardUtil.setOnKeyDownListener(mOnKeyDownListener);

        setCmdListener(this);
        displayBanner(AdvertInfo.AREA_ID_LOGIN);
    }

    SoftKeyboardUtil.OnKeyDownListener mOnKeyDownListener = new SoftKeyboardUtil.OnKeyDownListener() {
        @Override
        public void beforeKeyDown(EditText textView, int key_code) {
            if (textView == etVertify)
                mSmallKeyboardUtil.setEnablePlayNumberSound(false);//在输入密码前，关闭 字母 语音提醒
        }

        @Override
        public void afterKeyDown(EditText textView, int key_code) {
            mSmallKeyboardUtil.setEnablePlayNumberSound(true);//在输入密码后，关闭 字母 语音提醒
        }
    };

    @Override
    public void initData() {
        initHeader();
        initCopyright();
        initMenu("绑定投递卡");
        tvCard.setText("当前卡号：" + cardID);
    }

    @Override
    protected void onStart() {
        super.onStart();
        if (vertify == 0) {
            if (!NetUtils.isConnected(mContext)) {
                logger.debug("isAvailableNetWork:" + NetUtils.isConnected(mContext));
                displayErrorMsg("当前网络连接不可用，请等待网络可用后操作，谢谢合作！");
                MainActivity.startAct(BindActivity.this);
            } else {
                postLoginCard();
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (requester != null) {
            requester.cancel();
        }
    }


    CountDownClock.IProgressListener mIProgressListener = new CountDownClock.IProgressListener() {
        String lastText;

        @Override
        public void onStart() {
            lastText = btnVertify.getText().toString();
            btnVertify.setEnabled(false);
        }

        @Override
        public void onProgress(int current, int max) {
            btnVertify.setText("" + current);
        }

        @Override
        public void onComplete() {
            btnVertify.setText(lastText);
            btnVertify.setEnabled(true);
        }
    };

    @Override
    public void onClick(View v) {
        if (type == 0) {
            phone = tvInputPhone.getText().toString();
        } else {
            phone = etPhone.getText().toString();
        }
        switch (v.getId()) {
            case R.id.btn_get_vertify: // 获取验证码
                if (!NetUtils.isConnected(self())) {
                    displayErrorMsg(self().getResources().getString(R.string.NO_NETWORK));
                    return;
                }
                phoneTMP = phone;
                if (phone.isEmpty()) {
                    displayErrorMsg("手机号码不能为空，请输入！");
                    return;
                }
                if (!Util.isMobileNO(phone)) {
                    displayErrorMsg("手机号码不符合规则，请重新输入！");
                    return;
                }
                mCountDownClock = CountDownClock.create(self()).fromTime(60).go(mIProgressListener);

                // PH-手机号 IC-RF卡号 FP-指纹号
                if (type == 0) { // ic卡已绑定
                    if (phone.equals(bindPhone)) {
                        pcodeSend(phone);
                    } else {
                        displayErrorMsg("输入的手机号非绑定的手机号，请重新输入！");
                        return;
                    }
                } else { // ic卡未绑定
                    pcodeSend(phone);
                }

                break;
            case R.id.btn_bind_action:
                verify = etVertify.getText().toString();
                if (phone.isEmpty() || !phone.equals(phoneTMP)) {
                    displayErrorMsg("手机号与验证码不匹配，请核对手机号！");
                    return;
                }
                if (verify.isEmpty() || !reVerify.equals(verify)) {
                    displayErrorMsg("验证码不正确，请重新输入或重新发送！");
                    return;
                }
                if (type == 0) {
                    postUnbindCard();
                } else {
                    postBindCard();
                }
                break;
            case R.id.activity_menu_goHome:
                MainActivity.startAct(BindActivity.this);
                break;
        }
    }

    private void initUnbindCard() {
        tvInputPhone.setText(bindPhone);
        llyTvPhone.setVisibility(View.VISIBLE);
        llyEtPhone.setVisibility(View.GONE);
        etVertify.requestFocus();
        initMenu("解绑投递卡");
        tvDesc1.setText(Html.fromHtml("请输入您要解绑的手机号获取到验证码，解绑成功后<br><br>您将失去免密码登录特权！"));
        btnBingAction.setText("解绑");

    }

    private void initBindCard() {
        llyTvPhone.setVisibility(View.GONE);
        llyEtPhone.setVisibility(View.VISIBLE);
        etPhone.requestFocus();
        initMenu("绑定投递卡");
        tvDesc1.setText(Html.fromHtml("请输入您要绑定的手机号和对应的验证码，绑定成功后<br><br>您将永久免密码登录特权！"));
        btnBingAction.setText("绑定");
    }

    /**
     * 处理串口刷卡消息
     *
     * @param cmd 消息内容
     */
    @Override
    public void handle(String cmd) {
        try {
            if (!mCmd.equals(cmd)) {
                mCmd = cmd;
                String[] cmds = mCmd.split(",");
                if (cmds[0].equals(Constants.RECMD_RFID)) {// 刷卡
                    cardID = cmds[1].trim();
                    tvCard.setText("当前卡号：" + cardID);
                    postLoginCard();
                }
            }
        } catch (Exception e) {
            logger.error("handleCardLogin " + e);
        }
    }

    @Override
    public void dataReresh(int type) {
        displayBanner(AdvertInfo.AREA_ID_LOGIN);
    }

    private void initRequester() {
        if (requester == null) {
            requester = new CabzooRequester(mContext);
        }
    }

    /**
     * 绑定投递卡
     */
    private void postBindCard() {
        initRequester();
        requester.icardBind(new MyJsonResponseHandler<String>(mContext, true) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers,
                                   String rawJsonResponse, String response) {
                parseBandCard(rawJsonResponse);
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure)
                    throws Throwable {
                return rawJsonData;
            }
        }, phone, cardID);
    }

    /**
     * 解绑投递卡
     */
    private void postUnbindCard() {
        initRequester();
        requester.icardUnbind(new MyJsonResponseHandler<String>(mContext, true) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers,
                                   String rawJsonResponse, String response) {
                parseBandCard(rawJsonResponse);
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure)
                    throws Throwable {
                return rawJsonData;
            }

        }, phone, cardID);
    }

    /**
     * 投递卡登录
     */
    private void postLoginCard() {
        initRequester();
        requester.loginIcard(new MyJsonResponseHandler<String>(mContext, true) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers,
                                   String rawJsonResponse, String response) {
                handleLogincard(rawJsonResponse);
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure)
                    throws Throwable {
                return rawJsonData;
            }
        }, cardID, REFER);
    }

    /**
     * 发送手机验证码
     *
     * @param phone
     */
    public void pcodeSend(String phone) {
        initRequester();
        requester.pcodeSend(new MyJsonResponseHandler<String>(mContext, true) {

            @Override
            public void _onSuccess(int statusCode, Header[] headers, String rawJsonResponse,
                                   String response) {
                try {
                    JSONObject jo = new JSONObject(rawJsonResponse);
                    int code = jo.getInt("code");
                    if (code == 0) {
                        displayErrorMsg("请输入接收到的短信验证码！");
                        JSONObject body = jo.getJSONObject("body");
                        reVerify = body.optString("pcode");
                        etVertify.setFocusable(true);
                        etVertify.requestFocus();
                    } else {
                        displayErrorMsg("获取短信验证码异常，请重新获取！");
                    }
                } catch (Exception e) {
                    logger.error("pcodeSend " + e);
                }
            }

            @Override
            protected String parseResponse(String rawJsonData, boolean isFailure) throws Throwable {
                return rawJsonData;
            }
        }, phone);
    }

    /**
     * 绑定/解绑卡回调处理
     *
     * @param rawJsonResponse
     */
    public void parseBandCard(String rawJsonResponse) {
        try {
            JSONObject jo = new JSONObject(rawJsonResponse);
            int code = jo.getInt("code");
            String msgg = jo.getString("msg");
            if (code == 0) {
                if (type == 0) {
                    displayErrorMsg("解绑成功！");
                } else if (type == 1) {
                    displayErrorMsg("绑定成功！");
                }
                MainActivity.startActX(BindActivity.this);
            } else {
                String tips = msgg;
                if (code == 20022) {
                    tips = "该手机号已绑定其它卡，请更换手机号";
                } else {
                    if (type == 0) {
                        tips = "解绑失败";
                    } else if (type == 1) {
                        tips = "绑定失败";
                    }
                }
                displayErrorMsg(tips);
            }
        } catch (Exception e) {
            logger.error("parseBandCard " + e);
        }
    }

    /**
     * 处理登陆回调
     *
     * @param rawJsonResponse
     */
    public void handleLogincard(String rawJsonResponse) {
        try {
            JSONObject jo = new JSONObject(rawJsonResponse);
            int code = jo.getInt("code");
            // String msgg = jo.getString("msg");
            if (code == 10101) { // IC卡未绑定
                type = 1;
                initBindCard();
            } else if (code == Apis.Code.CODE_SYS_SUCESS) {
                type = 0;
                JSONObject body = jo.getJSONObject("body");
                bindPhone = body.getString("phone");
                initUnbindCard();
            }
        } catch (Exception e) {
            logger.error("handleLogincard " + e);
        }
    }
}

